<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yusys.agile.issue.dao.IssueMapper">
    <resultMap id="BaseResultMap" type="com.yusys.agile.issue.domain.Issue">
        <id column="issue_id" jdbcType="BIGINT" property="issueId"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="parent_id" jdbcType="BIGINT" property="parentId"/>
        <result column="issue_type" jdbcType="TINYINT" property="issueType"/>
        <result column="sprint_id" jdbcType="BIGINT" property="sprintId"/>
        <result column="module_id" jdbcType="BIGINT" property="moduleId"/>
        <result column="system_id" jdbcType="BIGINT" property="systemId"/>
        <result column="handler" jdbcType="BIGINT" property="handler"/>
        <result column="begin_date" jdbcType="TIMESTAMP" property="beginDate"/>
        <result column="end_date" jdbcType="TIMESTAMP" property="endDate"/>
        <result column="plan_workload" jdbcType="INTEGER" property="planWorkload"/>
        <result column="really_workload" jdbcType="INTEGER" property="reallyWorkload"/>
        <result column="priority" jdbcType="TINYINT" property="priority"/>
        <result column="importance" jdbcType="TINYINT" property="importance"/>
        <result column="stage_id" jdbcType="BIGINT" property="stageId"/>
        <result column="lane_id" jdbcType="BIGINT" property="laneId"/>
        <result column="state" jdbcType="VARCHAR" property="state"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="project_id" jdbcType="BIGINT" property="projectId"/>
        <result column="is_collect" jdbcType="TINYINT" property="isCollect"/>
        <result column="completion" jdbcType="VARCHAR" property="completion"/>
        <result column="task_type" jdbcType="INTEGER" property="taskType"/>
        <result column="create_uid" jdbcType="BIGINT" property="createUid"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_uid" jdbcType="BIGINT" property="updateUid"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="fault_type" jdbcType="BIGINT" property="faultType"/>
        <result column="fault_level" jdbcType="BIGINT" property="faultLevel"/>
        <result column="fixed_time" jdbcType="TIMESTAMP" property="fixedTime"/>
        <result column="close_time" jdbcType="TIMESTAMP" property="closeTime"/>
        <result column="fixed_uid" jdbcType="BIGINT" property="fixedUid"/>
        <result column="test_uid" jdbcType="BIGINT" property="testUid"/>
        <result column="version_id" jdbcType="BIGINT" property="versionId"/>
        <result column="case_id" jdbcType="BIGINT" property="caseId"/>
        <result column="deadline" jdbcType="TIMESTAMP" property="deadline"/>
        <result column="file" jdbcType="VARCHAR" property="file"/>
        <result column="urgency" jdbcType="VARCHAR" property="urgency"/>
        <result column="cause" jdbcType="VARCHAR" property="cause"/>
        <result column="detected_phase" jdbcType="VARCHAR" property="detectedPhase"/>
        <result column="manual_case_id" jdbcType="BIGINT" property="manualCaseId"/>
        <result column="source" jdbcType="TINYINT" property="source"/>
        <result column="remain_workload" jdbcType="INTEGER" property="remainWorkload"/>
        <result column="bug_id" jdbcType="BIGINT" property="bugId"/>
        <result column="order" jdbcType="INTEGER" property="order"/>
        <result column="block_state" jdbcType="TINYINT" property="blockState"/>
        <result column="reopen_times" jdbcType="INTEGER" property="reopenTimes"/>
        <result column="assess_is_pass" jdbcType="TINYINT" property="assessIsPass"/>
        <result column="assess_remarks" jdbcType="VARCHAR" property="assessRemarks"/>
        <result column="tenant_code" jdbcType="VARCHAR" property="tenantCode"/>
        <result column="cmp_sync_result" jdbcType="TINYINT" property="cmpSyncResult"/>
        <result column="is_archive" jdbcType="TINYINT" property="isArchive"/>
        <result column="is_cancel" jdbcType="TINYINT" property="isCancel"/>
        <result column="team_id" jdbcType="BIGINT" property="teamId"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    issue_id, title, parent_id, issue_type, sprint_id, module_id, system_id, handler, 
    begin_date, end_date, plan_workload, really_workload, priority, importance, stage_id, 
    lane_id, state, status, project_id, is_collect, completion, task_type, create_uid, 
    create_time, update_uid, update_time, fault_type, fault_level, fixed_time, close_time, 
    fixed_uid, test_uid, version_id, case_id, deadline, file, urgency, cause, detected_phase, 
    manual_case_id, source, remain_workload, bug_id, `order`, block_state, reopen_times,assess_is_pass,assess_remarks,tenant_code,
    cmp_sync_result,is_archive,is_cancel,team_id
  </sql>

    <select id="selectByExampleWithBLOBs" parameterType="com.yusys.agile.issue.domain.IssueExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from s_issue
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="com.yusys.agile.issue.domain.IssueExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from s_issue
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from s_issue
        where issue_id = #{issueId,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from s_issue
    where issue_id = #{issueId,jdbcType=BIGINT}
  </delete>
    <delete id="deleteByExample" parameterType="com.yusys.agile.issue.domain.IssueExample">
        delete from s_issue
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.yusys.agile.issue.domain.Issue" useGeneratedKeys="true"
            keyProperty="issueId">
    insert into s_issue (issue_id, title, parent_id, 
      issue_type, sprint_id, module_id, 
      system_id, handler, begin_date, 
      end_date, plan_workload, really_workload, 
      priority, importance, stage_id, 
      lane_id, state, status, 
      project_id, is_collect, completion, 
      task_type, create_uid, create_time, 
      update_uid, update_time, fault_type, 
      fault_level, fixed_time, close_time, 
      fixed_uid, test_uid, version_id, 
      case_id, deadline, file, 
      urgency, cause, detected_phase, 
      manual_case_id, source, remain_workload, 
      bug_id, `order`, block_state,
      reopen_times,assess_is_pass,assess_remarks,tenant_code,team_id)
    values (#{issueId,jdbcType=BIGINT}, #{title,jdbcType=VARCHAR}, #{parentId,jdbcType=BIGINT}, 
      #{issueType,jdbcType=TINYINT}, #{sprintId,jdbcType=BIGINT}, #{moduleId,jdbcType=BIGINT}, 
      #{systemId,jdbcType=BIGINT}, #{handler,jdbcType=BIGINT}, #{beginDate,jdbcType=TIMESTAMP}, 
      #{endDate,jdbcType=TIMESTAMP}, #{planWorkload,jdbcType=INTEGER}, #{reallyWorkload,jdbcType=INTEGER}, 
      #{priority,jdbcType=TINYINT}, #{importance,jdbcType=TINYINT}, #{stageId,jdbcType=BIGINT}, 
      #{laneId,jdbcType=BIGINT}, #{state,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT}, 
      #{projectId,jdbcType=BIGINT}, #{isCollect,jdbcType=TINYINT}, #{completion,jdbcType=VARCHAR}, 
      #{taskType,jdbcType=INTEGER}, #{createUid,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateUid,jdbcType=BIGINT}, #{updateTime,jdbcType=TIMESTAMP}, #{faultType,jdbcType=BIGINT}, 
      #{faultLevel,jdbcType=BIGINT}, #{fixedTime,jdbcType=TIMESTAMP}, #{closeTime,jdbcType=TIMESTAMP}, 
      #{fixedUid,jdbcType=BIGINT}, #{testUid,jdbcType=BIGINT}, #{versionId,jdbcType=BIGINT}, 
      #{caseId,jdbcType=BIGINT}, #{deadline,jdbcType=TIMESTAMP}, #{file,jdbcType=VARCHAR}, 
      #{urgency,jdbcType=VARCHAR}, #{cause,jdbcType=VARCHAR}, #{detectedPhase,jdbcType=VARCHAR}, 
      #{manualCaseId,jdbcType=BIGINT}, #{source,jdbcType=TINYINT}, #{remainWorkload,jdbcType=INTEGER}, 
      #{bugId,jdbcType=BIGINT}, #{order,jdbcType=INTEGER}, #{blockState,jdbcType=TINYINT}, 
      #{reopenTimes,jdbcType=INTEGER}, #{assessIsPass,jdbcType=TINYINT},#{assessRemarks,jdbcType=VARCHAR},
      #{tenantCode},#{teamId,jdbcType=BIGINT})
  </insert>
    <insert id="insertSelective" parameterType="com.yusys.agile.issue.domain.Issue" useGeneratedKeys="true"
            keyProperty="issueId">
        insert into s_issue
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <!--<if test="issueId != null">-->
                <!--issue_id,-->
            <!--</if>-->
            <if test="title != null">
                title,
            </if>
            <if test="parentId != null">
                parent_id,
            </if>
            <if test="issueType != null">
                issue_type,
            </if>
            <if test="sprintId != null">
                sprint_id,
            </if>
            <if test="moduleId != null">
                module_id,
            </if>
            <if test="systemId != null">
                system_id,
            </if>
            <if test="handler != null">
                handler,
            </if>
            <if test="beginDate != null">
                begin_date,
            </if>
            <if test="endDate != null">
                end_date,
            </if>
            <if test="planWorkload != null">
                plan_workload,
            </if>
            <if test="reallyWorkload != null">
                really_workload,
            </if>
            <if test="priority != null">
                priority,
            </if>
            <if test="importance != null">
                importance,
            </if>
            <if test="stageId != null">
                stage_id,
            </if>
            <if test="laneId != null">
                lane_id,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="projectId != null">
                project_id,
            </if>
            <if test="isCollect != null">
                is_collect,
            </if>
            <if test="completion != null">
                completion,
            </if>
            <if test="taskType != null">
                task_type,
            </if>
            <if test="createUid != null">
                create_uid,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateUid != null">
                update_uid,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="faultType != null">
                fault_type,
            </if>
            <if test="faultLevel != null">
                fault_level,
            </if>
            <if test="fixedTime != null">
                fixed_time,
            </if>
            <if test="closeTime != null">
                close_time,
            </if>
            <if test="fixedUid != null">
                fixed_uid,
            </if>
            <if test="testUid != null">
                test_uid,
            </if>
            <if test="versionId != null">
                version_id,
            </if>
            <if test="caseId != null">
                case_id,
            </if>
            <if test="deadline != null">
                deadline,
            </if>
            <if test="file != null">
                file,
            </if>
            <if test="urgency != null">
                urgency,
            </if>
            <if test="cause != null">
                cause,
            </if>
            <if test="detectedPhase != null">
                detected_phase,
            </if>
            <if test="manualCaseId != null">
                manual_case_id,
            </if>
            <if test="source != null">
                source,
            </if>
            <if test="remainWorkload != null">
                remain_workload,
            </if>
            <if test="bugId != null">
                bug_id,
            </if>
            <if test="order != null">
                `order`,
            </if>
            <if test="blockState != null">
                block_state,
            </if>
            <if test="reopenTimes != null">
                reopen_times,
            </if>
            <if test="assessIsPass != null">
                assess_is_pass,
            </if>
            <if test="assessRemarks != null">
                assess_remarks,
            </if>
            <if test="tenantCode != null">
                tenant_code,
            </if>
            <if test="isArchive != null">
                is_archive,
            </if>
            <if test="isCancel != null">
                is_cancel,
            </if>
            <if test="teamId != null">
                team_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <!--<if test="issueId != null">-->
                <!--#{issueId,jdbcType=BIGINT},-->
            <!--</if>-->
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="parentId != null">
                #{parentId,jdbcType=BIGINT},
            </if>
            <if test="issueType != null">
                #{issueType,jdbcType=TINYINT},
            </if>
            <if test="sprintId != null">
                #{sprintId,jdbcType=BIGINT},
            </if>
            <if test="moduleId != null">
                #{moduleId,jdbcType=BIGINT},
            </if>
            <if test="systemId != null">
                #{systemId,jdbcType=BIGINT},
            </if>
            <if test="handler != null">
                #{handler,jdbcType=BIGINT},
            </if>
            <if test="beginDate != null">
                #{beginDate,jdbcType=TIMESTAMP},
            </if>
            <if test="endDate != null">
                #{endDate,jdbcType=TIMESTAMP},
            </if>
            <if test="planWorkload != null">
                #{planWorkload,jdbcType=INTEGER},
            </if>
            <if test="reallyWorkload != null">
                #{reallyWorkload,jdbcType=INTEGER},
            </if>
            <if test="priority != null">
                #{priority,jdbcType=TINYINT},
            </if>
            <if test="importance != null">
                #{importance,jdbcType=TINYINT},
            </if>
            <if test="stageId != null">
                #{stageId,jdbcType=BIGINT},
            </if>
            <if test="laneId != null">
                #{laneId,jdbcType=BIGINT},
            </if>
            <if test="state != null">
                #{state,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="projectId != null">
                #{projectId,jdbcType=BIGINT},
            </if>
            <if test="isCollect != null">
                #{isCollect,jdbcType=TINYINT},
            </if>
            <if test="completion != null">
                #{completion,jdbcType=VARCHAR},
            </if>
            <if test="taskType != null">
                #{taskType,jdbcType=INTEGER},
            </if>
            <if test="createUid != null">
                #{createUid,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUid != null">
                #{updateUid,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="faultType != null">
                #{faultType,jdbcType=BIGINT},
            </if>
            <if test="faultLevel != null">
                #{faultLevel,jdbcType=BIGINT},
            </if>
            <if test="fixedTime != null">
                #{fixedTime,jdbcType=TIMESTAMP},
            </if>
            <if test="closeTime != null">
                #{closeTime,jdbcType=TIMESTAMP},
            </if>
            <if test="fixedUid != null">
                #{fixedUid,jdbcType=BIGINT},
            </if>
            <if test="testUid != null">
                #{testUid,jdbcType=BIGINT},
            </if>
            <if test="versionId != null">
                #{versionId,jdbcType=BIGINT},
            </if>
            <if test="caseId != null">
                #{caseId,jdbcType=BIGINT},
            </if>
            <if test="deadline != null">
                #{deadline,jdbcType=TIMESTAMP},
            </if>
            <if test="file != null">
                #{file,jdbcType=VARCHAR},
            </if>
            <if test="urgency != null">
                #{urgency,jdbcType=VARCHAR},
            </if>
            <if test="cause != null">
                #{cause,jdbcType=VARCHAR},
            </if>
            <if test="detectedPhase != null">
                #{detectedPhase,jdbcType=VARCHAR},
            </if>
            <if test="manualCaseId != null">
                #{manualCaseId,jdbcType=BIGINT},
            </if>
            <if test="source != null">
                #{source,jdbcType=TINYINT},
            </if>
            <if test="remainWorkload != null">
                #{remainWorkload,jdbcType=INTEGER},
            </if>
            <if test="bugId != null">
                #{bugId,jdbcType=BIGINT},
            </if>
            <if test="order != null">
                #{order,jdbcType=INTEGER},
            </if>
            <if test="blockState != null">
                #{blockState,jdbcType=TINYINT},
            </if>
            <if test="reopenTimes != null">
                #{reopenTimes,jdbcType=INTEGER},
            </if>
            <if test="assessIsPass != null">
                #{assessIsPass,jdbcType=TINYINT},
            </if>
            <if test="assessRemarks != null">
                #{assessRemarks,jdbcType=VARCHAR},
            </if>
            <if test="tenantCode != null">
                #{tenantCode,jdbcType=VARCHAR},
            </if>
            <if test="isArchive != null">
                #{isArchive,jdbcType=TINYINT},
            </if>
            <if test="isCancel != null">
                #{isCancel,jdbcType=TINYINT},
            </if>
            <if test="teamId != null">
                #{teamId,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.yusys.agile.issue.domain.IssueExample" resultType="java.lang.Long">
        select count(*) from s_issue
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update s_issue
        <set>
            <if test="record.issueId != null">
                issue_id = #{record.issueId,jdbcType=BIGINT},
            </if>
            <if test="record.title != null">
                title = #{record.title,jdbcType=VARCHAR},
            </if>
            <if test="record.parentId != null">
                parent_id = #{record.parentId,jdbcType=BIGINT},
            </if>
            <if test="record.issueType != null">
                issue_type = #{record.issueType,jdbcType=TINYINT},
            </if>
            <if test="record.sprintId != null">
                sprint_id = #{record.sprintId,jdbcType=BIGINT},
            </if>
            <if test="record.moduleId != null">
                module_id = #{record.moduleId,jdbcType=BIGINT},
            </if>
            <if test="record.systemId != null">
                system_id = #{record.systemId,jdbcType=BIGINT},
            </if>
            <if test="record.handler != null">
                handler = #{record.handler,jdbcType=BIGINT},
            </if>
            <if test="record.beginDate != null">
                begin_date = #{record.beginDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.endDate != null">
                end_date = #{record.endDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.planWorkload != null">
                plan_workload = #{record.planWorkload,jdbcType=INTEGER},
            </if>
            <if test="record.reallyWorkload != null">
                really_workload = #{record.reallyWorkload,jdbcType=INTEGER},
            </if>
            <if test="record.priority != null">
                priority = #{record.priority,jdbcType=TINYINT},
            </if>
            <if test="record.importance != null">
                importance = #{record.importance,jdbcType=TINYINT},
            </if>
            <if test="record.stageId != null">
                stage_id = #{record.stageId,jdbcType=BIGINT},
            </if>
            <if test="record.laneId != null">
                lane_id = #{record.laneId,jdbcType=BIGINT},
            </if>
            <if test="record.state != null">
                state = #{record.state,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=TINYINT},
            </if>
            <if test="record.projectId != null">
                project_id = #{record.projectId,jdbcType=BIGINT},
            </if>
            <if test="record.isCollect != null">
                is_collect = #{record.isCollect,jdbcType=TINYINT},
            </if>
            <if test="record.completion != null">
                completion = #{record.completion,jdbcType=VARCHAR},
            </if>
            <if test="record.taskType != null">
                task_type = #{record.taskType,jdbcType=INTEGER},
            </if>
            <if test="record.createUid != null">
                create_uid = #{record.createUid,jdbcType=BIGINT},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateUid != null">
                update_uid = #{record.updateUid,jdbcType=BIGINT},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.faultType != null">
                fault_type = #{record.faultType,jdbcType=BIGINT},
            </if>
            <if test="record.faultLevel != null">
                fault_level = #{record.faultLevel,jdbcType=BIGINT},
            </if>
            <if test="record.fixedTime != null">
                fixed_time = #{record.fixedTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.closeTime != null">
                close_time = #{record.closeTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.fixedUid != null">
                fixed_uid = #{record.fixedUid,jdbcType=BIGINT},
            </if>
            <if test="record.testUid != null">
                test_uid = #{record.testUid,jdbcType=BIGINT},
            </if>
            <if test="record.versionId != null">
                version_id = #{record.versionId,jdbcType=BIGINT},
            </if>
            <if test="record.caseId != null">
                case_id = #{record.caseId,jdbcType=BIGINT},
            </if>
            <if test="record.deadline != null">
                deadline = #{record.deadline,jdbcType=TIMESTAMP},
            </if>
            <if test="record.file != null">
                file = #{record.file,jdbcType=VARCHAR},
            </if>
            <if test="record.urgency != null">
                urgency = #{record.urgency,jdbcType=VARCHAR},
            </if>
            <if test="record.cause != null">
                cause = #{record.cause,jdbcType=VARCHAR},
            </if>
            <if test="record.detectedPhase != null">
                detected_phase = #{record.detectedPhase,jdbcType=VARCHAR},
            </if>
            <if test="record.manualCaseId != null">
                manual_case_id = #{record.manualCaseId,jdbcType=BIGINT},
            </if>
            <if test="record.source != null">
                source = #{record.source,jdbcType=TINYINT},
            </if>
            <if test="record.remainWorkload != null">
                remain_workload = #{record.remainWorkload,jdbcType=INTEGER},
            </if>
            <if test="record.bugId != null">
                bug_id = #{record.bugId,jdbcType=BIGINT},
            </if>
            <if test="record.order != null">
                `order` = #{record.order,jdbcType=INTEGER},
            </if>
            <if test="record.blockState != null">
                block_state = #{record.blockState,jdbcType=TINYINT},
            </if>
            <if test="record.reopenTimes != null">
                reopen_times = #{record.reopenTimes,jdbcType=INTEGER},
            </if>
            <if test="record.assessIsPass != null">
                assess_is_pass = #{record.assessIsPass,jdbcType=TINYINT},
            </if>
            <if test="record.assessRemarks != null">
                assess_remarks = #{record.assessRemarks,jdbcType=VARCHAR},
            </if>
            <if test="record.tenantCode != null">
                tenant_code = #{record.tenantCode,jdbcType=VARCHAR},
            </if>
            <if test="record.cmpSyncResult != null">
                cmp_sync_result = #{record.cmpSyncResult,jdbcType=TINYINT},
            </if>
            <if test="record.isArchive != null">
                is_archive = #{record.isArchive,jdbcType=TINYINT},
            </if>
            <if test="record.isCancel != null">
                is_cancel = #{record.isCancel,jdbcType=TINYINT}
            </if>
            <if test="record.teamId != null">
                team_id = #{record.teamId,jdbcType=BIGINT}
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update s_issue
        set issue_id = #{record.issueId,jdbcType=BIGINT},
        title = #{record.title,jdbcType=VARCHAR},
        parent_id = #{record.parentId,jdbcType=BIGINT},
        issue_type = #{record.issueType,jdbcType=TINYINT},
        sprint_id = #{record.sprintId,jdbcType=BIGINT},
        module_id = #{record.moduleId,jdbcType=BIGINT},
        system_id = #{record.systemId,jdbcType=BIGINT},
        handler = #{record.handler,jdbcType=BIGINT},
        begin_date = #{record.beginDate,jdbcType=TIMESTAMP},
        end_date = #{record.endDate,jdbcType=TIMESTAMP},
        plan_workload = #{record.planWorkload,jdbcType=INTEGER},
        really_workload = #{record.reallyWorkload,jdbcType=INTEGER},
        priority = #{record.priority,jdbcType=TINYINT},
        importance = #{record.importance,jdbcType=TINYINT},
        stage_id = #{record.stageId,jdbcType=BIGINT},
        lane_id = #{record.laneId,jdbcType=BIGINT},
        state = #{record.state,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=TINYINT},
        project_id = #{record.projectId,jdbcType=BIGINT},
        is_collect = #{record.isCollect,jdbcType=TINYINT},
        completion = #{record.completion,jdbcType=VARCHAR},
        task_type = #{record.taskType,jdbcType=INTEGER},
        create_uid = #{record.createUid,jdbcType=BIGINT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_uid = #{record.updateUid,jdbcType=BIGINT},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        fault_type = #{record.faultType,jdbcType=BIGINT},
        fault_level = #{record.faultLevel,jdbcType=BIGINT},
        fixed_time = #{record.fixedTime,jdbcType=TIMESTAMP},
        close_time = #{record.closeTime,jdbcType=TIMESTAMP},
        fixed_uid = #{record.fixedUid,jdbcType=BIGINT},
        test_uid = #{record.testUid,jdbcType=BIGINT},
        version_id = #{record.versionId,jdbcType=BIGINT},
        case_id = #{record.caseId,jdbcType=BIGINT},
        deadline = #{record.deadline,jdbcType=TIMESTAMP},
        file = #{record.file,jdbcType=VARCHAR},
        urgency = #{record.urgency,jdbcType=VARCHAR},
        cause = #{record.cause,jdbcType=VARCHAR},
        detected_phase = #{record.detectedPhase,jdbcType=VARCHAR},
        manual_case_id = #{record.manualCaseId,jdbcType=BIGINT},
        source = #{record.source,jdbcType=TINYINT},
        remain_workload = #{record.remainWorkload,jdbcType=INTEGER},
        bug_id = #{record.bugId,jdbcType=BIGINT},
        `order` = #{record.order,jdbcType=INTEGER},
        block_state = #{record.blockState,jdbcType=TINYINT},
        reopen_times = #{record.reopenTimes,jdbcType=INTEGER},
        assess_is_pass = #{record.assessIsPass,jdbcType=TINYINT},
        assess_remarks = #{record.assessRemarks,jdbcType=VARCHAR},
        is_archive = #{record.isArchive,jdbcType=TINYINT},
        is_cancel = #{record.isCancel,jdbcType=TINYINT},
        team_id = #{record.teamId,jdbcType=BIGINT},
        tenant_code = #{record.tenantCode,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update s_issue
        set issue_id = #{record.issueId,jdbcType=BIGINT},
        title = #{record.title,jdbcType=VARCHAR},
        parent_id = #{record.parentId,jdbcType=BIGINT},
        issue_type = #{record.issueType,jdbcType=TINYINT},
        sprint_id = #{record.sprintId,jdbcType=BIGINT},
        module_id = #{record.moduleId,jdbcType=BIGINT},
        system_id = #{record.systemId,jdbcType=BIGINT},
        handler = #{record.handler,jdbcType=BIGINT},
        begin_date = #{record.beginDate,jdbcType=TIMESTAMP},
        end_date = #{record.endDate,jdbcType=TIMESTAMP},
        plan_workload = #{record.planWorkload,jdbcType=INTEGER},
        really_workload = #{record.reallyWorkload,jdbcType=INTEGER},
        priority = #{record.priority,jdbcType=TINYINT},
        importance = #{record.importance,jdbcType=TINYINT},
        stage_id = #{record.stageId,jdbcType=BIGINT},
        lane_id = #{record.laneId,jdbcType=BIGINT},
        state = #{record.state,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=TINYINT},
        project_id = #{record.projectId,jdbcType=BIGINT},
        is_collect = #{record.isCollect,jdbcType=TINYINT},
        completion = #{record.completion,jdbcType=VARCHAR},
        task_type = #{record.taskType,jdbcType=INTEGER},
        create_uid = #{record.createUid,jdbcType=BIGINT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_uid = #{record.updateUid,jdbcType=BIGINT},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        fault_type = #{record.faultType,jdbcType=BIGINT},
        fault_level = #{record.faultLevel,jdbcType=BIGINT},
        fixed_time = #{record.fixedTime,jdbcType=TIMESTAMP},
        close_time = #{record.closeTime,jdbcType=TIMESTAMP},
        fixed_uid = #{record.fixedUid,jdbcType=BIGINT},
        test_uid = #{record.testUid,jdbcType=BIGINT},
        version_id = #{record.versionId,jdbcType=BIGINT},
        case_id = #{record.caseId,jdbcType=BIGINT},
        deadline = #{record.deadline,jdbcType=TIMESTAMP},
        file = #{record.file,jdbcType=VARCHAR},
        urgency = #{record.urgency,jdbcType=VARCHAR},
        cause = #{record.cause,jdbcType=VARCHAR},
        detected_phase = #{record.detectedPhase,jdbcType=VARCHAR},
        manual_case_id = #{record.manualCaseId,jdbcType=BIGINT},
        source = #{record.source,jdbcType=TINYINT},
        remain_workload = #{record.remainWorkload,jdbcType=INTEGER},
        bug_id = #{record.bugId,jdbcType=BIGINT},
        `order` = #{record.order,jdbcType=INTEGER},
        block_state = #{record.blockState,jdbcType=TINYINT},
        reopen_times = #{record.reopenTimes,jdbcType=INTEGER}
        assess_is_pass = #{record.assessIsPass,jdbcType=TINYINT},
        assess_remarks = #{record.assessRemarks,jdbcType=VARCHAR},
        is_archive = #{record.isArchive,jdbcType=TINYINT},
        is_cancel = #{record.isCancel,jdbcType=TINYINT},
        team_id = #{record.teamId,jdbcType=BIGINT},
        tenant_code = #{record.tenantCode,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.yusys.agile.issue.domain.Issue">
        update s_issue
        <set>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="parentId != null">
                parent_id = #{parentId,jdbcType=BIGINT},
            </if>
            <if test="issueType != null">
                issue_type = #{issueType,jdbcType=TINYINT},
            </if>
            <if test="sprintId != null">
                sprint_id = #{sprintId,jdbcType=BIGINT},
            </if>
            <if test="moduleId != null">
                module_id = #{moduleId,jdbcType=BIGINT},
            </if>
            <if test="systemId != null">
                system_id = #{systemId,jdbcType=BIGINT},
            </if>
            <if test="handler != null">
                handler = #{handler,jdbcType=BIGINT},
            </if>
            <if test="beginDate != null">
                begin_date = #{beginDate,jdbcType=TIMESTAMP},
            </if>
            <if test="endDate != null">
                end_date = #{endDate,jdbcType=TIMESTAMP},
            </if>
            <if test="planWorkload != null">
                plan_workload = #{planWorkload,jdbcType=INTEGER},
            </if>
            <if test="reallyWorkload != null">
                really_workload = #{reallyWorkload,jdbcType=INTEGER},
            </if>
            <if test="priority != null">
                priority = #{priority,jdbcType=TINYINT},
            </if>
            <if test="importance != null">
                importance = #{importance,jdbcType=TINYINT},
            </if>
            <if test="stageId != null">
                stage_id = #{stageId,jdbcType=BIGINT},
            </if>
            <if test="laneId != null">
                lane_id = #{laneId,jdbcType=BIGINT},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="projectId != null">
                project_id = #{projectId,jdbcType=BIGINT},
            </if>
            <if test="isCollect != null">
                is_collect = #{isCollect,jdbcType=TINYINT},
            </if>
            <if test="completion != null">
                completion = #{completion,jdbcType=VARCHAR},
            </if>
            <if test="taskType != null">
                task_type = #{taskType,jdbcType=INTEGER},
            </if>
            <if test="createUid != null">
                create_uid = #{createUid,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUid != null">
                update_uid = #{updateUid,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="faultType != null">
                fault_type = #{faultType,jdbcType=BIGINT},
            </if>
            <if test="faultLevel != null">
                fault_level = #{faultLevel,jdbcType=BIGINT},
            </if>
            <if test="fixedTime != null">
                fixed_time = #{fixedTime,jdbcType=TIMESTAMP},
            </if>
            <if test="closeTime != null">
                close_time = #{closeTime,jdbcType=TIMESTAMP},
            </if>
            <if test="fixedUid != null">
                fixed_uid = #{fixedUid,jdbcType=BIGINT},
            </if>
            <if test="testUid != null">
                test_uid = #{testUid,jdbcType=BIGINT},
            </if>
            <if test="versionId != null">
                version_id = #{versionId,jdbcType=BIGINT},
            </if>
            <if test="caseId != null">
                case_id = #{caseId,jdbcType=BIGINT},
            </if>
            <if test="deadline != null">
                deadline = #{deadline,jdbcType=TIMESTAMP},
            </if>
            <if test="file != null">
                file = #{file,jdbcType=VARCHAR},
            </if>
            <if test="urgency != null">
                urgency = #{urgency,jdbcType=VARCHAR},
            </if>
            <if test="cause != null">
                cause = #{cause,jdbcType=VARCHAR},
            </if>
            <if test="detectedPhase != null">
                detected_phase = #{detectedPhase,jdbcType=VARCHAR},
            </if>
            <if test="manualCaseId != null">
                manual_case_id = #{manualCaseId,jdbcType=BIGINT},
            </if>
            <if test="source != null">
                source = #{source,jdbcType=TINYINT},
            </if>
            <if test="remainWorkload != null">
                remain_workload = #{remainWorkload,jdbcType=INTEGER},
            </if>
            <if test="bugId != null">
                bug_id = #{bugId,jdbcType=BIGINT},
            </if>
            <if test="order != null">
                `order` = #{order,jdbcType=INTEGER},
            </if>
            <if test="blockState != null">
                block_state = #{blockState,jdbcType=TINYINT},
            </if>
            <if test="reopenTimes != null">
                reopen_times = #{reopenTimes,jdbcType=INTEGER},
            </if>
            <if test="assessIsPass != null">
                assess_is_pass = #{assessIsPass,jdbcType=TINYINT},
            </if>
            <if test="assessRemarks != null">
                assess_remarks = #{assessRemarks,jdbcType=VARCHAR},
            </if>
            <if test="tenantCode != null">
                tenant_code = #{tenantCode,jdbcType=VARCHAR},
            </if>
            <if test="cmpSyncResult != null">
                cmp_sync_result = #{cmpSyncResult,jdbcType=TINYINT},
            </if>
            <if test="isArchive != null">
                is_archive = #{isArchive,jdbcType=TINYINT},
            </if>
            <if test="isCancel != null">
                is_cancel = #{isCancel,jdbcType=TINYINT}
            </if>
            <if test="teamId != null">
                team_id = #{teamId,jdbcType=BIGINT}
            </if>
        </set>
        where issue_id = #{issueId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yusys.agile.issue.domain.Issue">
    update s_issue
    set title = #{title,jdbcType=VARCHAR},
      parent_id = #{parentId,jdbcType=BIGINT},
      issue_type = #{issueType,jdbcType=TINYINT},
      sprint_id = #{sprintId,jdbcType=BIGINT},
      module_id = #{moduleId,jdbcType=BIGINT},
      system_id = #{systemId,jdbcType=BIGINT},
      handler = #{handler,jdbcType=BIGINT},
      begin_date = #{beginDate,jdbcType=TIMESTAMP},
      end_date = #{endDate,jdbcType=TIMESTAMP},
      plan_workload = #{planWorkload,jdbcType=INTEGER},
      really_workload = #{reallyWorkload,jdbcType=INTEGER},
      priority = #{priority,jdbcType=TINYINT},
      importance = #{importance,jdbcType=TINYINT},
      stage_id = #{stageId,jdbcType=BIGINT},
      lane_id = #{laneId,jdbcType=BIGINT},
      state = #{state,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      project_id = #{projectId,jdbcType=BIGINT},
      is_collect = #{isCollect,jdbcType=TINYINT},
      completion = #{completion,jdbcType=VARCHAR},
      task_type = #{taskType,jdbcType=INTEGER},
      create_uid = #{createUid,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_uid = #{updateUid,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      fault_type = #{faultType,jdbcType=BIGINT},
      fault_level = #{faultLevel,jdbcType=BIGINT},
      fixed_time = #{fixedTime,jdbcType=TIMESTAMP},
      close_time = #{closeTime,jdbcType=TIMESTAMP},
      fixed_uid = #{fixedUid,jdbcType=BIGINT},
      test_uid = #{testUid,jdbcType=BIGINT},
      version_id = #{versionId,jdbcType=BIGINT},
      case_id = #{caseId,jdbcType=BIGINT},
      deadline = #{deadline,jdbcType=TIMESTAMP},
      file = #{file,jdbcType=VARCHAR},
      urgency = #{urgency,jdbcType=VARCHAR},
      cause = #{cause,jdbcType=VARCHAR},
      detected_phase = #{detectedPhase,jdbcType=VARCHAR},
      manual_case_id = #{manualCaseId,jdbcType=BIGINT},
      source = #{source,jdbcType=TINYINT},
      remain_workload = #{remainWorkload,jdbcType=INTEGER},
      bug_id = #{bugId,jdbcType=BIGINT},
      `order` = #{order,jdbcType=INTEGER},
      block_state = #{blockState,jdbcType=TINYINT},
      reopen_times = #{reopenTimes,jdbcType=INTEGER},
      assess_is_pass = #{assessIsPass,jdbcType=TINYINT},
      assess_remarks = #{assessRemarks,jdbcType=VARCHAR},
      is_archive = #{isArchive,jdbcType=TINYINT},
      is_cancel = #{isCancel,jdbcType=TINYINT},
      team_id = #{teamId,jdbcType=BIGINT},
      tenant_code = #{tenantCode,jdbcType=VARCHAR}
    where issue_id = #{issueId,jdbcType=BIGINT}
  </update>
    <update id="updateByPrimaryKey" parameterType="com.yusys.agile.issue.domain.Issue">
    update s_issue
    set title = #{title,jdbcType=VARCHAR},
      parent_id = #{parentId,jdbcType=BIGINT},
      issue_type = #{issueType,jdbcType=TINYINT},
      sprint_id = #{sprintId,jdbcType=BIGINT},
      module_id = #{moduleId,jdbcType=BIGINT},
      system_id = #{systemId,jdbcType=BIGINT},
      handler = #{handler,jdbcType=BIGINT},
      begin_date = #{beginDate,jdbcType=TIMESTAMP},
      end_date = #{endDate,jdbcType=TIMESTAMP},
      plan_workload = #{planWorkload,jdbcType=INTEGER},
      really_workload = #{reallyWorkload,jdbcType=INTEGER},
      priority = #{priority,jdbcType=TINYINT},
      importance = #{importance,jdbcType=TINYINT},
      stage_id = #{stageId,jdbcType=BIGINT},
      lane_id = #{laneId,jdbcType=BIGINT},
      state = #{state,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      project_id = #{projectId,jdbcType=BIGINT},
      is_collect = #{isCollect,jdbcType=TINYINT},
      completion = #{completion,jdbcType=VARCHAR},
      task_type = #{taskType,jdbcType=INTEGER},
      create_uid = #{createUid,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_uid = #{updateUid,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      fault_type = #{faultType,jdbcType=BIGINT},
      fault_level = #{faultLevel,jdbcType=BIGINT},
      fixed_time = #{fixedTime,jdbcType=TIMESTAMP},
      close_time = #{closeTime,jdbcType=TIMESTAMP},
      fixed_uid = #{fixedUid,jdbcType=BIGINT},
      test_uid = #{testUid,jdbcType=BIGINT},
      version_id = #{versionId,jdbcType=BIGINT},
      case_id = #{caseId,jdbcType=BIGINT},
      deadline = #{deadline,jdbcType=TIMESTAMP},
      file = #{file,jdbcType=VARCHAR},
      urgency = #{urgency,jdbcType=VARCHAR},
      cause = #{cause,jdbcType=VARCHAR},
      detected_phase = #{detectedPhase,jdbcType=VARCHAR},
      manual_case_id = #{manualCaseId,jdbcType=BIGINT},
      source = #{source,jdbcType=TINYINT},
      remain_workload = #{remainWorkload,jdbcType=INTEGER},
      bug_id = #{bugId,jdbcType=BIGINT},
    `order` = #{order,jdbcType=INTEGER},
      block_state = #{blockState,jdbcType=TINYINT},
      reopen_times = #{reopenTimes,jdbcType=INTEGER},
      assess_is_pass = #{assessIsPass,jdbcType=TINYINT},
      assess_remarks = #{assessRemarks,jdbcType=VARCHAR},
      is_archive = #{isArchive,jdbcType=TINYINT},
      is_cancel = #{isCancel,jdbcType=TINYINT},
      team_id = #{teamId,jdbcType=BIGINT},
      tenant_code = #{tenantCode,jdbcType=VARCHAR}
    where issue_id = #{issueId,jdbcType=BIGINT}
  </update>


    <update id="updateStatusAndParentId">
    update s_issue set parent_id=null,state='E' where parent_id=#{issueId}
  </update>

    <select id="listAllCreateUsers" resultType="Long">
    select DISTINCT create_uid from s_issue where issue_type=5 and create_uid is not NULL and  project_id = #{projectId};
  </select>

    <select id="listAllFixedUsers" resultType="Long">
    select DISTINCT fixed_uid from s_issue where issue_type=5 and fixed_uid is not NULL and  project_id = #{projectId};
  </select>

    <select id="listAllTestUsers" resultType="Long">
    select DISTINCT test_uid from s_issue where issue_type=5 and test_uid is not NULL and  project_id = #{projectId};
  </select>
    <select id="getStoryBySprintId" resultType="com.yusys.agile.issue.domain.Issue">
        SELECT
        <include refid="Base_Column_List"/>
        from s_issue
        WHERE sprint_id = #{sprintId} AND issue_type = 3 AND state = 'U' and is_archive != 1 ORDER BY priority DESC
    </select>
    <select id="countStories4Sprint" resultType="int">
    SELECT COUNT(1) from s_issue WHERE sprint_id = #{sprintId} AND issue_type = 3 AND state = 'U'  and  is_archive != 1
  </select>
    <select id="countInsprintBySprint" resultType="Integer">
    SELECT COUNT(1) from s_issue a WHERE a.sprint_id = #{sprintId} AND a.issue_type = 3  AND state = 'U'   and  is_archive != 1 AND a.lane_id != 106
  </select>
    <select id="countTasks4Sprint" resultType="int">
    SELECT COUNT(1) from s_issue WHERE sprint_id = #{sprintId} AND issue_type IN(4,5) AND state = 'U'  and  is_archive != 1
  </select>
    <select id="countUnFinishedTasks4Sprint" resultType="int">
    SELECT COUNT(1) from s_issue WHERE sprint_id = #{sprintId} AND state = 'U'  and  is_archive != 1
    AND ((issue_type = 4 and lane_id IN(107,108,109)) or (issue_type = 5 and lane_id IN(1000,1001)))
  </select>
    <update id="deleteRelation">
        update
        s_issue
        set parent_id = null
        <if test="sprintId != null">
            ,sprint_id = null
        </if>
        where issue_id = #{issueId} and parent_id = #{parentId}
    </update>
    <update id="changeSprintIdByStoryId">
    update s_issue SET sprint_id = #{sprintId},update_time = now() WHERE parent_id=#{issueId} AND state = 'U'  and  is_archive != 1
  </update>

    <select id="count4ArrangedByIds" resultType="int">
        SELECT COUNT(1) from s_issue
        WHERE issue_id IN(
        <foreach collection="issueIds" item="issueId" separator=",">
            #{issueId}
        </foreach>
        ) AND state = "E"
    </select>

    <update id="updateStatusByParentId">
    update s_issue set sprint_id = null,lane_id=107,handler=null,update_time = now() where parent_id=#{issueId} and state = 'U'  and  is_archive != 1
  </update>
    <select id="getBySprint" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        from s_issue
        WHERE sprint_id = #{sprintId} AND issue_type IN(4,5) AND state = 'U' and is_archive != 1
    </select>
    <update id="createBatchRelation">
        update s_issue SET parent_id = #{parentId},stage_id=111,
        <if test="sprintId != null">
            sprint_id = #{sprintId},
        </if>
        update_time = now(),update_uid=#{updateUid} WHERE issue_id in (
        <foreach collection="listIssueId" item="issueId" separator=",">
            #{issueId}
        </foreach>
        )
    </update>
    <select id="selectByExampleDTO" resultType="com.yusys.agile.issue.dto.IssueDTO">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from s_issue
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <update id="deleteAllChildRelation">
        update
        s_issue
        set
        parent_id = null
        <if test="sprintId != null">
            ,sprint_id = null
        </if>
        where parent_id = #{parentId}
    </update>

    <select id="selectTotalByExample" parameterType="com.yusys.agile.issue.domain.IssueExample">
        select
        count(*)
        from s_issue
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="getSecondStageNullIssueList" resultType="com.yusys.agile.issue.domain.Issue">
        select
        <include refid="Base_Column_List"/>
     FROM
       s_issue
        where
        project_id = #{projectId}
        and
        stage_id = #{stageId}
        and
        lane_id is null
        and
        state = 'U' and is_archive != 1
    </select>

    <update id="batchUpdateIssueLaneId">
        update
        s_issue
        set
        lane_id = #{laneId}
        where
        issue_id in
        <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        and
        project_id = #{projectId}
        and
        stage_id = #{stageId}
    </update>

    <update id="updateIssueLaneStateNull" parameterType="com.yusys.agile.issue.domain.Issue">
    update
    s_issue
    set
    lane_id = null
    where
    project_id = #{projectId}
    and
    stage_id = #{stageId}
    and
    lane_id = #{laneId}
    and
    state = 'U' and  is_archive != 1
  </update>

    <select id="getSecondLaneBindedIssues" resultType="com.yusys.agile.issue.domain.Issue">
        select
        <include refid="Base_Column_List"/>
     FROM
       s_issue
        where
        project_id = #{projectId}
        and
        stage_id = #{stageId}
        and
        lane_id = #{laneId}
        and
        state = 'U' and is_archive != 1
    </select>

    <select id="countTasks4SprintId" resultType="int">
    SELECT COUNT(1) from s_issue WHERE sprint_id = #{sprintId} AND issue_type = 4 AND state = 'U' and  is_archive != 1
  </select>
    <select id="countFinishedTasks4SprintId" resultType="int">
    SELECT COUNT(1) from s_issue WHERE sprint_id = #{sprintId} AND state = 'U' and  is_archive != 1
    AND issue_type = 4 and stage_id = 103
  </select>

    <select id="countFaults4SprintId" resultType="int">
    SELECT COUNT(1) from s_issue WHERE sprint_id = #{sprintId} AND issue_type = 5 AND state = 'U'  and  is_archive != 1
  </select>
    <select id="countFinishedFaults4SprintId" resultType="int">
    SELECT COUNT(1) from s_issue WHERE sprint_id = #{sprintId} AND state = 'U'  and  is_archive != 1
    AND issue_type = 5 and stage_id = 1004
  </select>

    <select id="sumPlanWorkload4Sprint" resultType="Integer">
    SELECT ifnull(sum(plan_workload),0) from s_issue  WHERE sprint_id = #{sprintId} AND state = 'U'  and  is_archive != 1 AND issue_type IN(4,5)
  </select>

    <select id="sumRemainWorkload4Sprint" resultType="Integer">
    SELECT ifnull(sum(remain_workload),0) from s_issue  WHERE sprint_id = #{sprintId} AND state = 'U' and  is_archive != 1
    AND ((issue_type = 4 and stage_id IN(100,101,102)) or (issue_type = 5 and stage_id IN(1000,1001)))
  </select>
    <update id="updatePrint">
    update s_issue set sprint_id = #{sprintId},update_time=#{updateTime},update_uid=#{updateUid} where issue_id = #{issueId}
  </update>
    <update id="updateByPrimaryKeySelectiveWithNull">
        update s_issue
        <set>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="parentId != null">
                parent_id = #{parentId,jdbcType=BIGINT},
            </if>
            <if test="issueType != null">
                issue_type = #{issueType,jdbcType=TINYINT},
            </if>
            sprint_id = #{sprintId,jdbcType=BIGINT},
            module_id = #{moduleId,jdbcType=BIGINT},
            <if test="systemId != null">
                system_id = #{systemId,jdbcType=BIGINT},
            </if>
            handler = #{handler,jdbcType=BIGINT},
            <if test="beginDate != null">
                begin_date = #{beginDate,jdbcType=TIMESTAMP},
            </if>
            <if test="endDate != null">
                end_date = #{endDate,jdbcType=TIMESTAMP},
            </if>
            <if test="planWorkload != null">
                plan_workload = #{planWorkload,jdbcType=INTEGER},
            </if>
            <if test="reallyWorkload != null">
                really_workload = #{reallyWorkload,jdbcType=INTEGER},
            </if>
            priority = #{priority,jdbcType=TINYINT},
            importance = #{importance,jdbcType=TINYINT},
            <if test="stageId != null">
                stage_id = #{stageId,jdbcType=BIGINT},
            </if>
            lane_id = #{laneId,jdbcType=BIGINT},
            <if test="state != null">
                state = #{state,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="projectId != null">
                project_id = #{projectId,jdbcType=BIGINT},
            </if>
            <if test="isCollect != null">
                is_collect = #{isCollect,jdbcType=TINYINT},
            </if>
            <if test="completion != null">
                completion = #{completion,jdbcType=VARCHAR},
            </if>
            <if test="taskType != null">
                task_type = #{taskType,jdbcType=INTEGER},
            </if>
            <if test="createUid != null">
                create_uid = #{createUid,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUid != null">
                update_uid = #{updateUid,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="faultType != null">
                fault_type = #{faultType,jdbcType=BIGINT},
            </if>
            <if test="faultLevel != null">
                fault_level = #{faultLevel,jdbcType=BIGINT},
            </if>
            <if test="fixedTime != null">
                fixed_time = #{fixedTime,jdbcType=TIMESTAMP},
            </if>
            <if test="closeTime != null">
                close_time = #{closeTime,jdbcType=TIMESTAMP},
            </if>
            <if test="fixedUid != null">
                fixed_uid = #{fixedUid,jdbcType=BIGINT},
            </if>
            <if test="testUid != null">
                test_uid = #{testUid,jdbcType=BIGINT},
            </if>
            <if test="versionId != null">
                version_id = #{versionId,jdbcType=BIGINT},
            </if>
            <if test="caseId != null">
                case_id = #{caseId,jdbcType=BIGINT},
            </if>
            <if test="deadline != null">
                deadline = #{deadline,jdbcType=TIMESTAMP},
            </if>
            <if test="file != null">
                file = #{file,jdbcType=VARCHAR},
            </if>
            <if test="urgency != null">
                urgency = #{urgency,jdbcType=VARCHAR},
            </if>
            <if test="cause != null">
                cause = #{cause,jdbcType=VARCHAR},
            </if>
            <if test="detectedPhase != null">
                detected_phase = #{detectedPhase,jdbcType=VARCHAR},
            </if>
            <if test="manualCaseId != null">
                manual_case_id = #{manualCaseId,jdbcType=BIGINT},
            </if>
            <if test="source != null">
                source = #{source,jdbcType=TINYINT},
            </if>
            <if test="remainWorkload != null">
                remain_workload = #{remainWorkload,jdbcType=INTEGER},
            </if>
            <if test="bugId != null">
                bug_id = #{bugId,jdbcType=BIGINT},
            </if>
            `order` = #{order,jdbcType=INTEGER},
            <if test="blockState != null">
                block_state = #{blockState,jdbcType=VARCHAR},
            </if>
            <if test="isArchive != null">
                is_archive = #{isArchive,jdbcType=TINYINT},
            </if>
            <if test="teamId != null">
                team_id = #{teamId,jdbcType=BIGINT},
            </if>
        </set>
        where issue_id = #{issueId,jdbcType=BIGINT}
    </update>

    <!-- 拖拽缺陷 -->
    <update id="updateFaultByPrimaryKeySelectiveWithNull">
        update s_issue
        <set>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="parentId != null">
                parent_id = #{parentId,jdbcType=BIGINT},
            </if>
            <if test="issueType != null">
                issue_type = #{issueType,jdbcType=TINYINT},
            </if>
            <if test="sprintId != null">
                sprint_id = #{sprintId,jdbcType=BIGINT},
            </if>
            <if test="moduleId != null">
                module_id = #{moduleId,jdbcType=BIGINT},
            </if>
            <if test="systemId != null">
                system_id = #{systemId,jdbcType=BIGINT},
            </if>
            handler = #{handler,jdbcType=BIGINT},
            <if test="beginDate != null">
                begin_date = #{beginDate,jdbcType=TIMESTAMP},
            </if>
            <if test="endDate != null">
                end_date = #{endDate,jdbcType=TIMESTAMP},
            </if>
            <if test="planWorkload != null">
                plan_workload = #{planWorkload,jdbcType=INTEGER},
            </if>
            <if test="reallyWorkload != null">
                really_workload = #{reallyWorkload,jdbcType=INTEGER},
            </if>
            <if test="priority != null">
                priority = #{priority,jdbcType=TINYINT},
            </if>
            <if test="importance != null">
                importance = #{importance,jdbcType=TINYINT},
            </if>
            <if test="stageId != null">
                stage_id = #{stageId,jdbcType=BIGINT},
            </if>
            <if test="laneId != null">
                lane_id = #{laneId,jdbcType=BIGINT},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="projectId != null">
                project_id = #{projectId,jdbcType=BIGINT},
            </if>
            <if test="isCollect != null">
                is_collect = #{isCollect,jdbcType=TINYINT},
            </if>
            <if test="completion != null">
                completion = #{completion,jdbcType=VARCHAR},
            </if>
            <if test="taskType != null">
                task_type = #{taskType,jdbcType=INTEGER},
            </if>
            <if test="createUid != null">
                create_uid = #{createUid,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUid != null">
                update_uid = #{updateUid,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="faultType != null">
                fault_type = #{faultType,jdbcType=BIGINT},
            </if>
            <if test="faultLevel != null">
                fault_level = #{faultLevel,jdbcType=BIGINT},
            </if>
            fixed_time = #{fixedTime,jdbcType=TIMESTAMP},
            <if test="closeTime != null">
                close_time = #{closeTime,jdbcType=TIMESTAMP},
            </if>
            fixed_uid = #{fixedUid,jdbcType=BIGINT},
            <if test="testUid != null">
                test_uid = #{testUid,jdbcType=BIGINT},
            </if>
            <if test="versionId != null">
                version_id = #{versionId,jdbcType=BIGINT},
            </if>
            <if test="caseId != null">
                case_id = #{caseId,jdbcType=BIGINT},
            </if>
            <if test="deadline != null">
                deadline = #{deadline,jdbcType=TIMESTAMP},
            </if>
            <if test="file != null">
                file = #{file,jdbcType=VARCHAR},
            </if>
            <if test="urgency != null">
                urgency = #{urgency,jdbcType=VARCHAR},
            </if>
            <if test="cause != null">
                cause = #{cause,jdbcType=VARCHAR},
            </if>
            <if test="detectedPhase != null">
                detected_phase = #{detectedPhase,jdbcType=VARCHAR},
            </if>
            <if test="manualCaseId != null">
                manual_case_id = #{manualCaseId,jdbcType=BIGINT},
            </if>
            <if test="source != null">
                source = #{source,jdbcType=TINYINT},
            </if>
            <if test="remainWorkload != null">
                remain_workload = #{remainWorkload,jdbcType=INTEGER},
            </if>
            <if test="bugId != null">
                bug_id = #{bugId,jdbcType=BIGINT},
            </if>
            <if test="order != null">
                `order` = #{order,jdbcType=INTEGER},
            </if>
            <if test="blockState != null">
                block_state = #{blockState,jdbcType=TINYINT},
            </if>
            <if test="reopenTimes != null">
                reopen_times = #{reopenTimes,jdbcType=INTEGER},
            </if>
            <if test="isArchive != null">
                is_archive = #{isArchive,jdbcType=TINYINT},
            </if>
        </set>
        where issue_id = #{issueId,jdbcType=BIGINT}
    </update>
    <update id="updateHandler">
    update s_issue set handler = #{handler},update_time = #{updateTime},update_uid = #{updateUid} where issue_id = #{issueId}
  </update>

    <!--重新打开缺陷 -->
    <update id="reopenFault">
    update s_issue
    set
    cause = #{cause},
    stage_id = #{stageId},
    test_uid = #{testUid},
    close_time = #{closeTime},
    fixed_time = #{fixedTime},
    reopen_times = #{reopenTimes},
    update_time = #{updateTime},
    <if test="handler != null">
        handler = #{handler},
    </if>
    update_uid = #{updateUid}
    where issue_id = #{issueId}

  </update>
    <select id="listRelation" resultType="com.yusys.agile.issue.dto.IssueDTO">
    select
    a.issue_id,a.title,a.parent_id,a.issue_type,a.`handler`,
    (select c.stage_name from s_kanban_stage_instance c where c.stage_id = a.stage_id and c.project_id=#{projectId} ) as stageName,
    (select d.stage_name from s_kanban_stage_instance d where d.stage_id = a.lane_id and d.parent_id = a.stage_id and d.project_id=#{projectId}) as laneName
    from s_issue a where a.state='U' and ((a.issue_id = (select parent_id from s_issue c where c.issue_id=#{issueId} and c.state='U')) or a.parent_id = #{issueId})
  </select>
    <select id="getTaskMemberAnalysis" resultType="com.yusys.agile.burndown.dto.HistogramTaskDTO">
        select
        ifnull(handler, 1) handler,
        sum(ifnull(remain_workload,plan_workload)) as sumRemainWorkLoad,
        sum(ifnull(really_workload,plan_workload)) as sumReallyWorkLoad,
        count(1) as taskNum
     FROM
       s_issue
        <where>
            issue_type in(4,5)
            and sprint_id = #{sprintId}
            and state = 'U'
            and is_archive != 1
            group by handler
            order by handler asc
        </where>
    </select>
    <select id="queryStoryForEpic" resultType="com.yusys.agile.issue.dto.IssueDTO">
        select
        a.issue_id, a.title, a.parent_id, a.issue_type, a.stage_id, a.lane_id,a.handler
        from s_issue a,s_issue b,s_issue c
        <where>
            a.parent_id = b.issue_id
            and b.parent_id = c.issue_id
            and a.issue_type =3
            and c.issue_id = #{epicId}
            and a.project_id = #{projectId}
            and a.state = 'U'
            and b.state = 'U'
            and c.state = 'U'
        </where>
    </select>

    <select id="getTemplateParentIssueList" resultType="com.yusys.agile.issue.domain.Issue">
    select
      distinct p.issue_id, p.title
    FROM
    s_issue p
    left join
      s_issue c
    on
      p.issue_id = c.parent_id
    and
      p.project_id = c.project_id
    and
      p.state = c.state
    where
      c.project_id = #{projectId}
    and
      c.issue_type = #{issueType}
    and
      c.state = 'U'
    and
      p.state = 'U'
  </select>

    <!-- 看板修改故事状态及任务阻塞状态 -->
    <update id="updateByPrimaryKeySelectiveWithNotNull">
        update s_issue
        <set>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="parentId != null">
                parent_id = #{parentId,jdbcType=BIGINT},
            </if>
            <if test="issueType != null">
                issue_type = #{issueType,jdbcType=TINYINT},
            </if>
            <if test="sprintId != null">
                sprint_id = #{sprintId,jdbcType=BIGINT},
            </if>
            <if test="moduleId != null">
                module_id = #{moduleId,jdbcType=BIGINT},
            </if>
            <if test="systemId != null">
                system_id = #{systemId,jdbcType=BIGINT},
            </if>
            <if test="handler != null">
                handler = #{handler,jdbcType=BIGINT},
            </if>
            <if test="beginDate != null">
                begin_date = #{beginDate,jdbcType=TIMESTAMP},
            </if>
            <if test="endDate != null">
                end_date = #{endDate,jdbcType=TIMESTAMP},
            </if>
            <if test="planWorkload != null">
                plan_workload = #{planWorkload,jdbcType=INTEGER},
            </if>
            <if test="reallyWorkload != null">
                really_workload = #{reallyWorkload,jdbcType=INTEGER},
            </if>
            <if test="priority != null">
                priority = #{priority,jdbcType=TINYINT},
            </if>
            <if test="importance != null">
                importance = #{importance,jdbcType=TINYINT},
            </if>
            <if test="stageId != null">
                stage_id = #{stageId,jdbcType=BIGINT},
            </if>
            <!--<if test="laneId != null"></if>-->
                lane_id = #{laneId,jdbcType=BIGINT},
            <if test="state != null">
                state = #{state,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="projectId != null">
                project_id = #{projectId,jdbcType=BIGINT},
            </if>
            <if test="isCollect != null">
                is_collect = #{isCollect,jdbcType=TINYINT},
            </if>
            <if test="completion != null">
                completion = #{completion,jdbcType=VARCHAR},
            </if>
            <if test="taskType != null">
                task_type = #{taskType,jdbcType=INTEGER},
            </if>
            <if test="createUid != null">
                create_uid = #{createUid,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUid != null">
                update_uid = #{updateUid,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="faultType != null">
                fault_type = #{faultType,jdbcType=BIGINT},
            </if>
            <if test="faultLevel != null">
                fault_level = #{faultLevel,jdbcType=BIGINT},
            </if>
            <if test="fixedTime != null">
                fixed_time = #{fixedTime,jdbcType=TIMESTAMP},
            </if>
            <if test="closeTime != null">
                close_time = #{closeTime,jdbcType=TIMESTAMP},
            </if>
            <if test="fixedUid != null">
                fixed_uid = #{fixedUid,jdbcType=BIGINT},
            </if>
            <if test="testUid != null">
                test_uid = #{testUid,jdbcType=BIGINT},
            </if>
            <if test="versionId != null">
                version_id = #{versionId,jdbcType=BIGINT},
            </if>
            <if test="caseId != null">
                case_id = #{caseId,jdbcType=BIGINT},
            </if>
            <if test="deadline != null">
                deadline = #{deadline,jdbcType=TIMESTAMP},
            </if>
            <if test="file != null">
                file = #{file,jdbcType=VARCHAR},
            </if>
            <if test="urgency != null">
                urgency = #{urgency,jdbcType=VARCHAR},
            </if>
            <if test="cause != null">
                cause = #{cause,jdbcType=VARCHAR},
            </if>
            <if test="detectedPhase != null">
                detected_phase = #{detectedPhase,jdbcType=VARCHAR},
            </if>
            <if test="manualCaseId != null">
                manual_case_id = #{manualCaseId,jdbcType=BIGINT},
            </if>
            <if test="source != null">
                source = #{source,jdbcType=TINYINT},
            </if>
            <if test="remainWorkload != null">
                remain_workload = #{remainWorkload,jdbcType=INTEGER},
            </if>
            <if test="bugId != null">
                bug_id = #{bugId,jdbcType=BIGINT},
            </if>
            <if test="order != null">
                `order` = #{order,jdbcType=INTEGER},
            </if>
            <if test="blockState != null">
                block_state = #{blockState,jdbcType=VARCHAR},
            </if>
            <if test="isArchive != null">
                is_archive = #{isArchive,jdbcType=TINYINT},
            </if>
            <if test="teamId != null">
                team_id = #{teamId,jdbcType=BIGINT},
            </if>
        </set>
        where issue_id = #{issueId,jdbcType=BIGINT}
    </update>

    <select id="queryIssueList" resultMap="BaseResultMap">
        select
        distinct
        iu.*
        from s_issue iu
        left join s_issue_module_relp imr on iu.issue_id = imr.issue_id
        left join s_issue_custom_field icf on iu.issue_id = icf.issue_id
        <where>
            iu.`state` = 'U'
            <if test="issueRecord.projectId != null ">
                and iu.project_id = #{issueRecord.projectId}
            </if>
            <if test="issueRecord.issueIds != null and issueRecord.issueIds.size()>0 ">
                and iu.issue_id in
                <foreach collection="issueRecord.issueIds" open="(" close=")" separator="," item="iterm">
                    #{iterm}
                </foreach>
            </if>
            <if test="issueRecord.issueId != null ">
                and ( iu.issue_id = #{issueRecord.issueId}
                or iu.title like CONCAT('%',#{issueRecord.issueId},'%') )
            </if>
            <if test="issueRecord.title != null ">
                and iu.title like CONCAT('%',#{issueRecord.title},'%')
            </if>
            <if test="issueRecord.BAPerson != null">
                and iu.issue_id in(
                select parent_id from s_issue
                where is_archive != 1 and issue_type =2 and state='U'
                and handler = #{issueRecord.BAPerson}
                and project_id = #{issueRecord.projectId})
            </if>
            <if test="issueRecord.issueTypes!= null">
                <if test="issueRecord.issueTypes!= null and issueRecord.issueTypes.queryType ==1 and issueRecord.issueTypes.dataByte.size()>0">
                    and ( iu.issue_type in
                    <foreach collection="issueRecord.issueTypes.dataByte" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                    or iu.issue_type is null )
                </if>
                <if test="issueRecord.issueTypes!= null and issueRecord.issueTypes.queryType ==2 and issueRecord.issueTypes.dataByte.size()>0">
                    and iu.issue_type in
                    <foreach collection="issueRecord.issueTypes.dataByte" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test="issueRecord.issueTypes!= null and issueRecord.issueTypes.queryType ==3 ">
                    and iu.issue_type is null
                </if>
            </if>
            <if test="issueRecord.prioritys!= null">
                <if test="issueRecord.prioritys.queryType ==1">
                    and ( iu.priority in
                    <foreach collection="issueRecord.prioritys.dataByte" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                    or priority is null )
                </if>
                <if test=" issueRecord.prioritys.queryType ==2 and issueRecord.prioritys.dataByte.size()>0">
                    and iu.priority in
                    <foreach collection="issueRecord.issueTypes.dataByte" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test="issueRecord.prioritys.queryType ==3 ">
                    and iu.priority is null
                </if>
            </if>

            <if test="issueRecord.importances!= null">
                <if test=" issueRecord.importances.queryType ==1 and issueRecord.importances.dataByte.size()>0">
                    and ( iu.importance in
                    <foreach collection="issueRecord.importances.dataByte" open="(" close=")" separator=","
                             item="iterm">
                        #{iterm}
                    </foreach>
                    or iu.importance is null )
                </if>
                <if test=" issueRecord.importances.queryType ==2 and issueRecord.importances.dataByte.size()>0">
                    and iu.importance in
                    <foreach collection="issueRecord.importances.dataByte" open="(" close=")" separator=","
                             item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test=" issueRecord.importances.queryType ==3 ">
                    and iu.importance is null
                </if>
            </if>
            <if test="issueRecord.completions!= null">
                <if test="issueRecord.completions.queryType ==1 and issueRecord.completions.dataString.size()>0">
                    and ( iu.completion in
                    <foreach collection="issueRecord.completions.dataString" open="(" close=")" separator=","
                             item="iterm">
                        #{iterm}
                    </foreach>
                    or iu.completion is null )
                </if>
                <if test="issueRecord.completions.queryType ==2 and issueRecord.completions.dataString.size()>0">
                    and iu.completion in
                    <foreach collection="issueRecord.completions.dataString" open="(" close=")" separator=","
                             item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test="issueRecord.completions.queryType ==3 ">
                    and iu.completion is null
                </if>
            </if>
            <choose>
                <when test="issueRecord.stageIds!= null and issueRecord.stageIds.dataLong.size()>0">
                    <if test="issueRecord.stageIds!= null">
                        <if test="issueRecord.stageIds.queryType ==1 and issueRecord.stageIds.dataLong.size()>0">
                            and ( iu.stage_id in
                            <foreach collection="issueRecord.stageIds.dataLong" open="(" close=")" separator=","
                                     item="iterm">
                                #{iterm}
                            </foreach>
                            or ( iu.lane_id in
                            <foreach collection="issueRecord.stageIds.dataLong" open="(" close=")" separator=","
                                     item="iterm">
                                #{iterm}
                            </foreach>
                            or ( iu.stage_id not in (1,7) and iu.lane_id IS NULL )
                            )
                            <if test="issueRecord.blockState != null ">
                                or iu.block_state = #{issueRecord.blockState}
                            </if>
                            )
                        </if>
                        <if test="issueRecord.stageIds.queryType ==2 and issueRecord.stageIds.dataLong.size()>0">
                            and ( iu.stage_id in
                            <foreach collection="issueRecord.stageIds.dataLong" open="(" close=")" separator=","
                                     item="iterm">
                                #{iterm}
                            </foreach>
                            or iu.lane_id in
                            <foreach collection="issueRecord.stageIds.dataLong" open="(" close=")" separator=","
                                     item="iterm">
                                #{iterm}
                            </foreach>
                            <if test="issueRecord.blockState != null ">
                                or iu.block_state = #{issueRecord.blockState}
                            </if>
                            )
                        </if>
                        <if test="issueRecord.stageIds.queryType ==3 ">
                            and ( iu.stage_id not in (1,7) and iu.lane_id IS NULL
                            <if test="issueRecord.blockState != null ">
                                or iu.block_state = #{issueRecord.blockState}
                            </if>
                            )
                        </if>
                    </if>
                </when>
                <otherwise>
                    <if test="issueRecord.blockState != null ">
                        and iu.block_state = #{issueRecord.blockState}
                    </if>
                </otherwise>
            </choose>
            <if test="issueRecord.faultLevels!= null">
                <if test="issueRecord.faultLevels.queryType ==1 and issueRecord.faultLevels.dataLong.size()>0">
                    and ( iu.fault_level in
                    <foreach collection="issueRecord.faultLevels.dataLong" open="(" close=")" separator=","
                             item="iterm">
                        #{iterm}
                    </foreach>
                    or iu.fault_level is null )
                </if>
                <if test=" issueRecord.faultLevels.queryType ==2 and issueRecord.faultLevels.dataLong.size()>0">
                    and iu.fault_level in
                    <foreach collection="issueRecord.faultLevels.dataLong" open="(" close=")" separator=","
                             item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test=" issueRecord.faultLevels.queryType ==3 ">
                    and iu.fault_level is null
                </if>
            </if>
            <if test="issueRecord.faultTypes!= null ">
                <if test="issueRecord.faultTypes.queryType ==1 and issueRecord.faultTypes.dataLong.size()>0">
                    and ( iu.fault_type in
                    <foreach collection="issueRecord.faultTypes.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                    or iu.fault_type is null )
                </if>
                <if test="issueRecord.faultTypes.queryType ==2 and issueRecord.faultTypes.dataLong.size()>0">
                    and iu.fault_type in
                    <foreach collection="issueRecord.faultTypes.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test=" issueRecord.faultTypes.queryType ==3 ">
                    and iu.fault_type is null
                </if>
            </if>
            <if test="issueRecord.orders!= null">
                <if test="issueRecord.orders.queryType ==1 and issueRecord.orders.dataInteger.size()>0">
                    and ( iu.`order` in
                    <foreach collection="issueRecord.orders.dataInteger" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                    or iu.`order` is null )
                </if>
                <if test="issueRecord.orders.queryType ==2 and issueRecord.orders.dataInteger.size()>0">
                    and iu.`order` in
                    <foreach collection="issueRecord.orders.dataInteger" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test="issueRecord.orders.queryType ==3 ">
                    and iu.`order` is null
                </if>
            </if>
            <if test="issueRecord.sprintIds!= null">
                <if test="issueRecord.sprintIds.queryType ==1 and issueRecord.sprintIds.dataLong.size()>0">
                    and ( iu.sprint_id in
                    <foreach collection="issueRecord.sprintIds.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                    or iu.sprint_id is null )
                </if>
                <if test="issueRecord.sprintIds.queryType ==2 and issueRecord.sprintIds.dataLong.size()>0">
                    and iu.sprint_id in
                    <foreach collection="issueRecord.sprintIds.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test=" issueRecord.sprintIds.queryType ==3 ">
                    and iu.sprint_id is null
                </if>
            </if>
            <if test="issueRecord.fixedUids!= null ">
                <if test="issueRecord.fixedUids.queryType ==1 and issueRecord.fixedUids.dataLong.size()>0">
                    and ( iu.fixed_uid in
                    <foreach collection="issueRecord.fixedUids.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                    or iu.fixed_uid is null )
                </if>
                <if test="issueRecord.fixedUids.queryType ==2 and issueRecord.fixedUids.dataLong.size()>0">
                    and fixed_uid in
                    <foreach collection="issueRecord.fixedUids.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test="issueRecord.fixedUids.queryType ==3 ">
                    and iu.fixed_uid is null
                </if>
            </if>
            <if test="issueRecord.testUids!= null ">
                <if test="issueRecord.testUids.queryType ==1 and issueRecord.testUids.dataLong.size()>0">
                    and ( iu.test_uid in
                    <foreach collection="issueRecord.testUids.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                    or iu.test_uid is null
                </if>
                <if test="issueRecord.testUids.queryType ==2 and issueRecord.testUids.dataLong.size()>0">
                    and iu.test_uid in
                    <foreach collection="issueRecord.testUids.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test="issueRecord.testUids.queryType ==3 ">
                    and iu.test_uid is null
                </if>
            </if>
            <if test="issueRecord.createUids!= null ">
                <if test="issueRecord.createUids.queryType ==1 and issueRecord.createUids.dataLong.size()>0">
                    and ( iu.create_uid in
                    <foreach collection="issueRecord.createUids.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                    or iu.create_uid is null )
                </if>
                <if test="issueRecord.createUids.queryType ==2 and issueRecord.createUids.dataLong.size()>0">
                    and iu.create_uid in
                    <foreach collection="issueRecord.createUids.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test=" issueRecord.createUids.queryType ==3 ">
                    and iu.create_uid is null
                </if>
            </if>
            <if test="issueRecord.updateUids!= null ">
                <if test="issueRecord.updateUids.queryType ==1 and issueRecord.updateUids.dataLong.size()>0">
                    and ( iu.update_uid in
                    <foreach collection="issueRecord.updateUids.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                    or iu.update_uid is null )
                </if>
                <if test="issueRecord.updateUids.queryType ==2 and issueRecord.updateUids.dataLong.size()>0">
                    and iu.update_uid in
                    <foreach collection="issueRecord.updateUids.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test="issueRecord.updateUids.queryType ==3 ">
                    and iu.update_uid is null
                </if>
            </if>
            <if test="issueRecord.handlers!= null ">
                <if test="issueRecord.handlers.queryType ==1 and issueRecord.handlers.dataLong.size()>0">
                    and ( iu.handler in
                    <foreach collection="issueRecord.handlers.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                    or iu.handler is null )
                </if>
                <if test="issueRecord.handlers.queryType ==2 and issueRecord.handlers.dataLong.size()>0">
                    and iu.handler in
                    <foreach collection="issueRecord.handlers.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test="issueRecord.handlers.queryType ==3 ">
                    and iu.handler is null
                </if>
            </if>
            <if test="issueRecord.systemIds!= null ">
                <if test="issueRecord.systemIds.queryType ==1 and issueRecord.systemIds.dataLong.size()>0">
                    and ( iu.system_id in
                    <foreach collection="issueRecord.systemIds.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                    or iu.system_id is null )
                </if>
                <if test="issueRecord.systemIds.queryType ==2 and issueRecord.systemIds.dataLong.size()>0">
                    and iu.system_id in
                    <foreach collection="issueRecord.systemIds.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test="issueRecord.systemIds.queryType ==3 ">
                    and iu.system_id is null
                </if>
            </if>

            <if test="issueRecord.moduleIds!= null ">
                <if test="issueRecord.moduleIds.queryType ==1 and issueRecord.moduleIds.dataLong.size()>0">
                    and ( imr.module_id in
                    <foreach collection="issueRecord.moduleIds.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                    or not exists (select * from s_issue_module_relp imr1 where iu.issue_id =imr1.issue_id) )
                </if>
                <if test="issueRecord.moduleIds.queryType ==2 and issueRecord.moduleIds.dataLong.size()>0">
                    and imr.module_id in
                    <foreach collection="issueRecord.moduleIds.dataLong" open="(" close=")" separator="," item="iterm">
                        #{iterm}
                    </foreach>
                </if>
                <if test="issueRecord.moduleIds.queryType ==3 ">
                    and not exists (select * from s_issue_module_relp imr1 where iu.issue_id =imr1.issue_id)
                </if>
            </if>
            <if test="issueRecord.createTime != null  ">
                <if test="issueRecord.createTime.queryType ==1 ">
                    and ( iu.create_time between #{issueRecord.createTime.dateBegin} and
                    #{issueRecord.createTime.dateEnd}
                    or iu.create_time is null )
                </if>
                <if test="issueRecord.createTime.queryType ==2 ">
                    and iu.create_time between #{issueRecord.createTime.dateBegin} and #{issueRecord.createTime.dateEnd}
                </if>
                <if test="issueRecord.createTime.queryType ==3 ">
                    and iu.create_time is null
                </if>
            </if>
            <if test="issueRecord.beginDate != null ">
                <if test="issueRecord.beginDate.queryType ==1 ">
                    and ( iu.begin_date between #{issueRecord.beginDate.dateBegin} and #{issueRecord.beginDate.dateEnd}
                    or iu.begin_date is null )
                </if>
                <if test="issueRecord.beginDate.queryType ==2 ">
                    and iu.begin_date between #{issueRecord.beginDate.dateBegin} and #{issueRecord.beginDate.dateEnd}
                </if>
                <if test="issueRecord.beginDate.queryType ==3 ">
                    and iu.begin_date is null
                </if>
            </if>
            <if test="issueRecord.endDate != null ">
                <if test="issueRecord.endDate.queryType ==1 ">
                    and ( iu.end_date between #{issueRecord.endDate.dateBegin} and #{issueRecord.endDate.dateEnd}
                    or iu.end_date is null )
                </if>
                <if test="issueRecord.endDate.queryType ==2 ">
                    and iu.end_date between #{issueRecord.endDate.dateBegin} and #{issueRecord.endDate.dateEnd}
                </if>
                <if test="issueRecord.endDate.queryType ==3 ">
                    and iu.end_date is null
                </if>
            </if>
            <if test="issueRecord.updateTime != null ">
                <if test="issueRecord.updateTime.queryType ==1 ">
                    and ( iu.update_time between #{issueRecord.updateTime.dateBegin} and
                    #{issueRecord.updateTime.dateEnd}
                    or iu.update_time is null )
                </if>
                <if test="issueRecord.updateTime.queryType ==2 ">
                    and iu.update_time between #{issueRecord.updateTime.dateBegin} and #{issueRecord.updateTime.dateEnd}
                </if>
                <if test="issueRecord.updateTime.queryType ==3 ">
                    and iu.update_time is null
                </if>
            </if>
            <if test="customFieldJsonTypeList.size()>0">

                <foreach collection="customFieldJsonTypeList" item="field" separator=" ">
                    and
                    <if test="field.queryType==1">
                        <if test="field.fieldType==0  or field.fieldType==2 or field.fieldType==5">
                            (cast( icf.field_value as signed ) between #{field.numBegin} and #{field.numEnd} AND
                            icf.field_id = #{field.fieldId}
                            OR NOT EXISTS ( SELECT * from s_issue_custom_field icf1 WHERE iu.issue_id = icf1.issue_id AND
                            icf1.field_id = #{field.fieldId} ))
                        </if>
                        <if test=" field.fieldType== 3">
                            ( icf.field_value in
                            <foreach collection="field.dataString" open="(" close=")" separator="," item="iterm">
                                #{iterm}
                            </foreach>
                            and icf.field_id = #{field.fieldId}
                            OR NOT EXISTS ( SELECT * from s_issue_custom_field icf1 WHERE iu.issue_id = icf1.issue_id AND
                            icf1.field_id = #{field.fieldId} )
                            )
                        </if>

                        <if test="field.fieldType==1  or field.fieldType== 4 or field.fieldType== 6 or field.fieldType== 7 or field.fieldType== 8">
                            (
                            <foreach collection="field.dataString" open="(" close=")" separator="or" item="iterm">
                                icf.field_value like concat('%',#{iterm},'%')
                            </foreach>
                            and icf.field_id = #{field.fieldId}
                            OR NOT EXISTS ( SELECT * from s_issue_custom_field icf1 WHERE iu.issue_id = icf1.issue_id AND
                            icf1.field_id = #{field.fieldId} )
                            )
                        </if>
                    </if>

                    <if test="field.queryType==2">
                        <if test="field.fieldType==0 or  field.fieldType==2 or field.fieldType==5">
                            ( cast( icf.field_value as signed) between #{field.numBegin} and #{field.numEnd} and
                            icf.field_id = #{field.fieldId} )
                        </if>
                        <if test=" field.fieldType== 3 ">
                            ( icf.field_value in
                            <foreach collection="field.dataString" open="(" close=")" separator="," item="iterm">
                                #{iterm}
                            </foreach>
                            and icf.field_id = #{field.fieldId} )
                        </if>

                        <if test="field.fieldType==1  or field.fieldType== 4 or field.fieldType== 6 or field.fieldType== 7 or field.fieldType== 8">
                            (
                            <foreach collection="field.dataString" open="(" close=")" separator="or" item="iterm">
                                icf.field_value like concat('%',#{iterm},'%')
                            </foreach>
                            and icf.field_id = #{field.fieldId}
                            )
                        </if>
                    </if>

                    <if test="field.queryType==3">
                        (
                        NOT EXISTS ( SELECT * from s_issue_custom_field icf1 WHERE iu.issue_id = icf1.issue_id AND
                        icf1.field_id = #{field.fieldId} )
                        )
                    </if>
                </foreach>
            </if>
        </where>
        <choose>
            <when test="issueRecord.queryFlag !=null">
                order by iu.priority asc
            </when>
            <otherwise>
                order by iu.create_time desc
            </otherwise>
        </choose>

        <if test="issueRecord.pageSize != null ">
            limit #{issueRecord.from},#{issueRecord.pageSize}
        </if>

    </select>

    <update id="updateBySprintId">
    update s_issue
    set
        lane_id=104,
        stage_id=4,
      sprint_id = #{sprintId,jdbcType=BIGINT}
    where issue_id = #{issueId,jdbcType=BIGINT}
  </update>

    <select id="selectBySystemId" resultType="com.yusys.agile.issue.dto.IssueDTO">
    select iss.issue_id,iss.issue_type,iss.stage_id
    from s_issue iss left join  s_issue_system_relp issy on iss.issue_id = issy.issue_id where
    issy.system_id = #{systemId} and iss.project_id = #{projectId} and iss.issue_type = #{issueType} and iss.state = "U"
  </select>


    <!--按版本统计系统各个阶段需求个数  -->
    <select id="selectBySystemIdAndVersion" resultType="com.yusys.agile.issue.dto.IssueDTO">
    SELECT a.issue_id,a.issue_type,a.stage_id
    from s_issue a
    LEFT JOIN s_version_issue_relate b ON a.issue_id = b.issue_id
    LEFT JOIN s_issue_system_relp d ON a.issue_id = d.issue_id
    WHERE a.system_id = #{systemId} AND a.project_id = #{projectId} AND a.issue_type=#{issueType} AND a.state = "U" AND b.version_id=#{versionId}
  </select>

    <select id="sumTaskByHandler" resultType="Integer">
	select count(1) from s_issue where project_id = #{projectId} and handler = #{userId}  and issue_type = 4 and state = "U"
  </select>

    <select id="sumWorkloadByUser" resultType="Integer">
    select ifnull(sum(plan_workload),0)
    from s_issue
    where project_id = #{projectId}
     and handler = #{userId}
      and issue_type = 4
       and state = "U"
  </select>

    <select id="getProjectMemberTaskList" resultType="com.yusys.agile.issue.domain.Issue">
        select
        issue_id,
        handler
     FROM
       s_issue
        where
        issue_id >= (
        select
        issue_id
     FROM
       s_issue
        where
        project_id = #{projectId}
        and
        handler in
        <foreach collection="memberIdList" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        <if test="sprintId != null">
            and
            sprint_id = #{sprintId}
        </if>
        and
        issue_type = 4
        and
        state = 'U'
        and is_archive != 1
        limit #{startIndex},1
        )
        and
        project_id = #{projectId}
        and
        handler in
        <foreach collection="memberIdList" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        <if test="sprintId != null">
            and
            sprint_id = #{sprintId}
        </if>
        and
        issue_type = 4
        and
        state = 'U'
        and is_archive != 1
        limit #{pageSize}
    </select>
    <!--根据业务需求查故事id集合-->
    <select id="getStoryIdsByEpic" resultType="java.lang.Long">
      select issue_id from s_issue where parent_id in (select issue_id from s_issue where parent_id = #{id})
  </select>
    <!--根据研发需求查故事id集合-->
    <select id="getStroyIdsByFeature" resultType="java.lang.Long">
    select issue_id from s_issue where parent_id = #{id}
  </select>
    <select id="countUnfinishOrNotRepairIssue" resultType="int">
      select count(1) from s_issue a where a.parent_id=#{storyId}  and a.issue_type in(4,5) and a.stage_id in(1000,1001,1002,100,101,102);
    </select>
    <select id="selectIssueIdByProjectId" resultType="java.lang.Long">
    select issue_id from s_issue
    <where>
     project_id = #{projectId} and state = 'U'  and  is_archive != 1
        <if test="title != null">
           AND title like CONCAT('%',#{title},'%')
        </if>
    </where>
  </select>

    <select id="selectIssueInfo" resultType="com.yusys.agile.issue.domain.Issue">
    select
      issue_id,
      title,
      handler,
      sprint_id,
      state,
      parent_id,
      project_id,
      stage_id
    FROM
    s_issue
    where
      issue_id = #{issueId}
    and
      issue_type = #{type}
  </select>

    <select id="getIssueTemplateParentList" resultType="com.yusys.agile.issue.domain.Issue">
    select
      issue_id, title
    FROM
    s_issue
    where
      project_id = #{projectId}
    and
      issue_type = #{issueType}
    and
      state = 'U'
    and
    is_archive != 1
  </select>

    <select id="getFaultIssuesByPage" resultType="com.yusys.agile.issue.domain.Issue">
    select
      issue_id,
      stage_id
    FROM
    s_issue
    where
      issue_id >=
    (
        select
          issue_id
     FROM
       s_issue
        where
          project_id = #{projectId}
        and
          issue_type = 5
        and
          state = 'U'
        and
         is_archive != 1
        order by issue_id limit #{offset},1
    )
    and
      project_id = #{projectId}
    and
      issue_type = 5
    and
      state = 'U'
    and
    is_archive != 1
    order by issue_id limit #{rows}
  </select>
    <select id="getEpioByBizNums" resultMap="BaseResultMap">

    </select>
    <select id="getIssueByBizNums" resultMap="BaseResultMap">
        select
        a.issue_id, a.title, a.parent_id, a.issue_type, a.sprint_id, a.handler,
        a.begin_date, a.end_date, a.plan_workload, a.really_workload,a.stage_id,
        a.lane_id, a.state, a.status,a.create_uid,
        a.create_time, a.update_uid, a.update_time,a.remain_workload
        from s_issue a
        inner join s_sys_extend_field_detail b on a.issue_id = b.issue_id
        <where>
            b.field_id = 'bizNum'
            <if test="issueType != null">
                and a.issue_type = #{issueType}
            </if>
            and b.value in
            <foreach collection="bizNumList" item="bizNum" open="(" separator="," close=")">
                #{bizNum}
            </foreach>
        </where>

    </select>


    <update id="updateIssueFeatureSyncResult">
    update
      s_issue
    set
      cmp_sync_result = #{cmpSyncResult}
    where
      issue_id = #{featureId}
  </update>

    <select id="getIssue" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
     FROM
       s_issue
        where
        issue_id = #{issueId}
        and
        state = 'U'
        and is_archive != 1
    </select>

    <update id="batchUpdateIssueStageStatus">
        update
        s_issue
        set
          stage_id = #{stageId},
          lane_id = #{laneId},
          update_time = now()
        where
        issue_id in
        <foreach collection="issueIdList" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>

    <select id="selectIssueList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
     FROM
       s_issue
        where
        issue_id >=
        (
        select
        issue_id
     FROM
       s_issue
        where
        issue_type = #{issueType}
        and
        state = 'U'
        and is_archive != 1
        and
        cmp_sync_result in (-1,0)
        <if test="issueType != 1">
            and
            parent_id is not null
        </if>
        order by issue_id limit #{startIndex},1
        )
        and
        issue_type = #{issueType}
        and
        state = 'U'
        and is_archive != 1
        and
        cmp_sync_result in (-1,0)
        <if test="issueType != 1">
            and
            parent_id is not null
        </if>
        order by issue_id limit #{pageSize}
    </select>

    <update id="batchUpdateIssueCmpSyncResult">
        update
        s_issue
        set
        cmp_sync_result = #{cmpSyncResult}
        where
        issue_id in
        <foreach collection="issueIdList" index="index" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </update>

    <select id="selectServiceManageIssueList" parameterType="com.yusys.agile.servicemanager.dto.ServiceManageIssueDTO"
            resultMap="BaseResultMap">
        select
            issue_id,
            title,
            stage_id,
            create_time
     FROM
       s_issue
        where
          issue_id &lt;=
        (
        select
          issue_id
     FROM
       s_issue
        where
          state = 'U'
        <!--and
          is_archive != 1-->
        and
          issue_type = 1
        <if test="serviceManage.createTimeBegin != null">
        and
            create_time >= #{serviceManage.createTimeBegin}
        </if>
        <if test="serviceManage.createTimeEnd != null">
        and
            create_time &lt;= #{serviceManage.createTimeEnd}
        </if>
        <if test="serviceManage.updateTimeBegin != null">
        and
            update_time >= #{serviceManage.updateTimeBegin}
        </if>
        <if test="serviceManage.updateTimeEnd != null">
        and
            update_time &lt;= #{serviceManage.updateTimeEnd}
        </if>
        order by issue_id desc limit #{startIndex},1
        )
        and
          state = 'U'
        <!--and
          is_archive != 1-->
        and
          issue_type = 1
        <if test="serviceManage.createTimeBegin != null">
        and
            create_time >= #{serviceManage.createTimeBegin}
        </if>
        <if test="serviceManage.createTimeEnd != null">
        and
            create_time &lt;= #{serviceManage.createTimeEnd}
        </if>
        <if test="serviceManage.updateTimeBegin != null">
        and
            update_time >= #{serviceManage.updateTimeBegin}
        </if>
        <if test="serviceManage.updateTimeEnd != null">
        and
            update_time &lt;= #{serviceManage.updateTimeEnd}
        </if>
        order by issue_id desc limit #{serviceManage.pageSize}
    </select>
    <select id="selectIssueForVersion" resultType="com.yusys.agile.issue.dto.IssueDTO">
        select
        <include refid="Base_Column_List"/>
        from s_issue a
        <where>
            a.is_archive != 1
            and a.stage_id != 7
            <if test="projectId != null">
                and a.project_id = #{projectId}
            </if>
            <if test="issueType != null">
                and a.issue_type = #{issueType}
            </if>
            <if test="sprintId != null">
                and a.sprint_id = #{sprintId}
            </if>
            <if test="handler != null">
                and a.issue_id in(
                    select parent_id from s_issue
                    where is_archive != 1 and issue_type =2 and state='U'
                        and handler = #{handler}
                        and project_id = #{projectId})
            </if>
            <if test="title != null">
                and a.title like #{title}
            </if>
            <if test="sysExtendList != null and sysExtendList.size() > 0">
                and a.issue_id in
                <foreach collection="sysExtendList" open="(" close=")" separator="," item="iterm">
                    #{iterm}
                </foreach>
            </if>
            <if test="inVersionIssueList != null and inVersionIssueList.size() > 0">
                and not exists(select 1 from bj_version_plan_requirements b where b.requirement_id = a.issue_id )
            </if>

        </where>
    </select>

    <select id="countAchievedIssues4Sprint" resultType="int">
        SELECT COUNT(1) from s_issue a
        <where>
            a.is_archive != 1  AND state = "U" AND stage_id = 7
            <if test="projectId != null">
                and a.project_id = #{projectId}
            </if>
            <if test="issueType != null">
                and a.issue_type = #{issueType}
            </if>
            <if test="sprintId != null">
                and a.sprint_id = #{sprintId}
            </if>
        </where>
    </select>

    <select id="countInsprintIssuesBySprint" resultType="Integer">
        SELECT COUNT(1) from s_issue a
        <where>
            a.is_archive != 1  AND state = "U" AND stage_id in (2,3,4,5,6)
            <if test="projectId != null">
                and a.project_id = #{projectId}
            </if>
            <if test="issueType != null">
                and a.issue_type = #{issueType}
            </if>
            <if test="sprintId != null">
                and a.sprint_id = #{sprintId}
            </if>
        </where>
    </select>

    <select id="countNotStartIssuesBySprint" resultType="Integer">
        SELECT COUNT(1) from s_issue a
        <where>
            a.is_archive != 1 AND state = "U" AND stage_id = 1
            <if test="projectId != null">
                and a.project_id = #{projectId}
            </if>
            <if test="issueType != null">
                and a.issue_type = #{issueType}
            </if>
            <if test="sprintId != null">
                and a.sprint_id = #{sprintId}
            </if>
        </where>
    </select>

    <select id="countInsprintTaskBySprint" resultType="Integer">
        SELECT COUNT(1) from s_issue a
        <where>
            a.is_archive != 1 AND state = "U" AND stage_id in (101,102) AND issue_type = 4
            <if test="projectId != null">
                and a.project_id = #{projectId}
            </if>
            <if test="sprintId != null">
                and a.sprint_id = #{sprintId}
            </if>
        </where>

    </select>

    <select id="countNotStartTaskBySprint" resultType="Integer">
        SELECT COUNT(1) from s_issue a
        <where>
            a.is_archive != 1 AND state = "U" AND stage_id = 100 AND issue_type = 4
            <if test="projectId != null">
                and a.project_id = #{projectId}
            </if>
            <if test="sprintId != null">
                and a.sprint_id = #{sprintId}
            </if>
        </where>
    </select>

    <select id="countFinishedTasks4Project" resultType="int">
    SELECT COUNT(1) from s_issue a
    <where>
        a.is_archive != 1 AND state = "U" AND stage_id = 103 AND issue_type = 4
        <if test="projectId != null">
            and a.project_id = #{projectId}
        </if>
        <if test="sprintId != null">
            and a.sprint_id = #{sprintId}
        </if>
    </where>
</select>
    <select id="listAllIssueId" resultType="java.lang.Long">
        WITH
        epic as (SELECT
        DISTINCT issue_id
     FROM
       s_issue
        WHERE
         state = 'U'
        AND issue_id IN
        <foreach collection="issueId" index="index" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
        ),
        feature as (
        SELECT
        DISTINCT issue_id
     FROM
       s_issue
        WHERE
        state = 'U'
        AND parent_id IN (select issue_id from epic)   ),
        story as (
        SELECT
        DISTINCT issue_id
     FROM
       s_issue
        WHERE
        state = 'U'
        AND parent_id IN (select issue_id from feature)   ),

        task as (
        SELECT
        DISTINCT issue_id
     FROM
       s_issue
        WHERE
        state = 'U'
        AND parent_id IN (select issue_id from story)   )

        select 	DISTINCT issue_id from  epic
        union all
        select 	DISTINCT issue_id from  feature
        union all
        select 	DISTINCT issue_id from  story
        union all
        select 	DISTINCT issue_id from  task
    </select>

    <insert id="insertTmp" parameterType="com.yusys.agile.issue.domain.Issue" useGeneratedKeys="true"
            keyProperty="issueId">
    insert into s_issue (issue_id, title, parent_id,
      issue_type, project_id, state,operate_time )
    values (#{issueId,jdbcType=BIGINT}, #{title,jdbcType=VARCHAR}, #{parentId,jdbcType=BIGINT},
      #{issueType,jdbcType=TINYINT},  #{projectId,jdbcType=BIGINT},'U' ,'20201112')
  </insert>
    <update id="updateTmp">
        update
        s_issue
        set
        operate_time = '20201112'
        where
        issue_id  = #{issueId,jdbcType=BIGINT}
    </update>
    <select id="listLevelIssueIdforEpic" resultType="java.lang.Long">
       SELECT
        DISTINCT issue_id
     FROM
       s_issue
        WHERE
        state = 'U'
        AND issue_type = 1
        <if test="issueIds != null and issueIds.size() > 0">
            AND issue_id IN
            <foreach collection="issueIds" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>

    </select>
    <select id="listLevelIssueIdforFeature" resultType="java.lang.Long">
        SELECT
        DISTINCT issue_id
     FROM
       s_issue
        WHERE
        state = 'U'
        AND issue_type = 2
        <if test="issueIds != null and issueIds.size() > 0">
            AND issue_id IN
            <foreach collection="issueIds" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="issueEpicIds != null and issueEpicIds.size() > 0">
            AND parent_id IN
            <foreach collection="issueEpicIds" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="listLevelIssueIdforStory" resultType="java.lang.Long">
        SELECT
        DISTINCT issue_id
        FROM
        s_issue
        WHERE
         state = 'U'
        AND issue_type =3
        <if test="issueIds != null and issueIds.size() > 0">
            AND issue_id IN
            <foreach collection="issueIds" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="issueFeatureIds != null and issueFeatureIds.size() > 0">
            AND parent_id IN
            <foreach collection="issueFeatureIds" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>

    </select>
    <select id="listLevelIssueIdforTask" resultType="java.lang.Long">
        SELECT
        DISTINCT issue_id
        FROM
       s_issue
        WHERE
         state = 'U'
        AND issue_type = 4
        <if test="issueIds != null and issueIds.size() > 0">
            AND issue_id IN
            <foreach collection="issueIds" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="issueStoryIds != null and issueStoryIds.size() > 0">
            AND parent_id IN
            <foreach collection="issueStoryIds" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
    </select>
    <select id="selectIssueListByParentId" resultMap="BaseResultMap">
        select
            su.*,
            (
                select
                    ksi.order_id
                from
                    s_kanban_stage_instance ksi
                where
                    ksi.stage_id = su.stage_id
                    and ksi.state ='U'
                    and ksi.project_id=#{projectId}
            ) as orderId
     FROM
       s_issue su
        where
            su.state ='U'
            and su.parent_id = #{parentId}
        order by
                orderId asc ,
                su.lane_id asc
    </select>


    <select id="getNotCanceledAndOnlineIssueByIssueIdList" resultType="java.lang.Long">
        SELECT
        DISTINCT issue_id
     FROM
       s_issue
        WHERE
        state = 'U'
        AND issue_type =1
        AND is_cancel = 0
        AND stage_id != 7

        <if test="issueIdList != null and issueIdList.size() > 0">
            AND issue_id IN
            <foreach collection="issueIdList" index="index" item="item" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="getNotOnlineEpic" resultType="java.lang.Long">
    SELECT
      a.issue_id
    FROM
    s_issue a
    WHERE
      a.state = 'U'
    AND a.stage_id != 7
    AND a.issue_type = 1
    AND NOT EXISTS (
    SELECT
        1
      FROM
        s_sys_extend_field_detail b
      WHERE
        b.issue_id = a.issue_id
      AND b.field_id = 'planStates'
     AND b.`value` IN ( '8880', '8884'))
     </select>
     <select id="noReqSchedulingEpicIdList" resultType="java.lang.Long">
                SELECT
                a.issue_id
            FROM
                s_issue a
            WHERE
                a.state = 'U'
                AND a.issue_type = 1
                AND NOT EXISTS (
                SELECT
                    1
                FROM
                    s_sys_extend_field_detail b
                WHERE
                    b.issue_id = a.issue_id
                AND b.field_id = 'reqScheduling'
                )
                AND NOT EXISTS (
                      SELECT
                        1
                      FROM
                        s_sys_extend_field_detail b
                      WHERE
                        b.issue_id = a.issue_id
                      AND b.field_id = 'planStates'
                      AND b.`value` IN ( '8880', '8881','8888'))
                union
                SELECT
                a.issue_id
            FROM
                s_issue a
            WHERE
                a.state = 'U'
                AND a.issue_type = 1
                AND EXISTS (
                SELECT
                    1
                FROM
                    s_sys_extend_field_detail b
                WHERE
                    b.issue_id = a.issue_id
                AND b.field_id = 'reqScheduling'
                and b.`value` = ''
                )
                AND NOT EXISTS (
                      SELECT
                        1
                      FROM
                        s_sys_extend_field_detail b
                      WHERE
                        b.issue_id = a.issue_id
                      AND b.field_id = 'planStates'
                      AND b.`value` IN ( '8880', '8881','8888'))
                union
                SELECT
                a.issue_id
            FROM
                s_issue a
            WHERE
                a.state = 'U'
                AND a.issue_type = 1
                AND EXISTS (
                SELECT
                    1
                FROM
                    s_sys_extend_field_detail b
                WHERE
                    b.issue_id = a.issue_id
                AND b.field_id = 'reqScheduling'
              AND b.`value` is null
                )
                AND NOT EXISTS (
                      SELECT
                        1
                      FROM
                        s_sys_extend_field_detail b
                      WHERE
                        b.issue_id = a.issue_id
                      AND b.field_id = 'planStates'
                      AND b.`value` IN ( '8880', '8881','8888'))
    </select>
    <select id="getAllTaskFunTester" resultType="java.lang.String">
        select c.`value` from s_issue b,s_sys_extend_field_detail c  where b.issue_id = c.issue_id and c.field_id='externalHandlerId' and  b.parent_id in (
select a.issue_id from s_issue a where a.parent_id = #{epicId} and a.state = 'U') and b.state = 'U';
    </select>
    
    <select id="getParentIssue" parameterType="java.lang.Long" resultType="com.yusys.agile.issue.domain.Issue">
        select
          r.issue_id,
          r.issue_type,
          r.parent_id,
          r.stage_id,
          r.lane_id,
          r.state
     FROM
       s_issue r
        left join
        s_issue t
        on
          r.issue_id = t.parent_id
        where
          t.issue_id = #{issueId}
        and
          r.state = 'U'
    </select>
    <select id="queryNotRelationStory" resultType="com.yusys.agile.issue.dto.IssueDTO">
        select a.title,a.priority,a.lane_id,a.issue_id,a.stage_id ,a.system_id
        from s_issue a
        where a.sprint_id is null
        and a.issue_type=3
        and a.state='U'
        and a.is_archive != 1
        <if test="systemIds != null and systemIds.size>0">
            and a.system_id in
            <foreach collection="systemIds" item="systemId" open="(" separator="," close=")">
                #{systemId}
            </foreach>
            </if>
        <if test="title != null and title != ''">
            AND (a.title LIKE CONCAT('%', #{title}, '%')or a.issue_id LIKE CONCAT('%', #{title}, '%'))
        </if>
    </select>


    <select id="countStoryPointsForSprint" resultType="java.lang.Integer">
        select sum(se.`value`)
        from
        s_issue si,
        s_sys_extend_field_detail se
        where
        si.issue_id = se.issue_id
        and si.sprint_id = #{sprintId} and si.issue_type=3 and si.is_archive != 1
    </select>

    <select id="countCurrTimeStoryPointsForSprintId" resultType="java.lang.Integer">
        <![CDATA[
        select sum(se.`value`) from
            s_issue si,
            s_sys_extend_field_detail se,
            s_burndown_chart_story b
        where 1=1
            and si.issue_id = se.issue_id
            and si.issue_id = b.story_id
            and si.sprint_id = #{sprintId}
            and si.issue_type=3 and si.is_archive != 1 and si.lane_id = 106
            and se.field_id = 'storyPoint'
            and b.story_state = 106
            and b.sprint_time = #{currTime}
        ]]>
    </select>

    <select id="getPlanWorkload" resultType="int">
    select ifnull(sum(plan_workload),0) from s_issue where sprint_id = #{sprintId} and state = 'U' and issue_type in(4,5);
  </select>
    <select id="getRemainWorkload" resultType="int">
    select ifnull(sum(remain_workload),0) from s_issue where sprint_id = #{sprintId} and state = 'U'
    AND ((issue_type = 4 and lane_id IN(107,108,109)) or (issue_type = 5 and stage_id IN(1000,1001)))
  </select>

  <select id="countFinishedStoryPoint" resultType="java.lang.Integer">
    select ifnull(sum(a.value), 0)
        from s_sys_extend_field_detail a
        where a.issue_id in
              (select issue_id
               from s_issue
               where sprint_id = #{sprintId}
                 and issue_type = 3
                 and lane_id = 106
                 and state = 'U')
  </select>
</mapper>