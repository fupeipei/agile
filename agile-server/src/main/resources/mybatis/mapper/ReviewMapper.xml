<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yusys.agile.review.dao.ReviewMapper">
  <resultMap id="BaseResultMap" type="com.yusys.agile.review.domain.Review">
    <id column="review_id" jdbcType="BIGINT" property="reviewId" />
    <result column="issue_id" jdbcType="BIGINT" property="issueId" />
    <result column="issue_type" jdbcType="TINYINT" property="issueType" />
    <result column="review_theme" jdbcType="VARCHAR" property="reviewTheme" />
    <result column="expect_time" jdbcType="TIMESTAMP" property="expectTime" />
    <result column="review_status" jdbcType="VARCHAR" property="reviewStatus" />
    <result column="version" jdbcType="VARCHAR" property="version" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <result column="project_id" jdbcType="BIGINT" property="projectId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_uid" jdbcType="BIGINT" property="createUid" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_uid" jdbcType="BIGINT" property="updateUid" />
    <result column="tenant_code" jdbcType="VARCHAR" property="tenantCode" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yusys.agile.review.domain.Review">
    <result column="review_desc" jdbcType="LONGVARCHAR" property="reviewDesc" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    review_id, issue_id, issue_type, review_theme, expect_time, review_status, version, 
    state, project_id, create_time, create_uid, update_time, update_uid, tenant_code
  </sql>
  <sql id="Blob_Column_List">
    review_desc
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.yusys.agile.review.domain.ReviewExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from s_review
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.yusys.agile.review.domain.ReviewExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from s_review
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from s_review
    where review_id = #{reviewId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from s_review
    where review_id = #{reviewId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.yusys.agile.review.domain.ReviewExample">
    delete from s_review
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yusys.agile.review.domain.Review" useGeneratedKeys="true" keyProperty="reviewId">
    insert into s_review (review_id, issue_id, issue_type,
      review_theme, expect_time, review_status, 
      version, state, project_id, 
      create_time, create_uid, update_time, 
      update_uid, tenant_code, review_desc
      )
    values (#{reviewId,jdbcType=BIGINT}, #{issueId,jdbcType=BIGINT}, #{issueType,jdbcType=TINYINT}, 
      #{reviewTheme,jdbcType=VARCHAR}, #{expectTime,jdbcType=TIMESTAMP}, #{reviewStatus,jdbcType=VARCHAR}, 
      #{version,jdbcType=VARCHAR}, #{state,jdbcType=VARCHAR}, #{projectId,jdbcType=BIGINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{createUid,jdbcType=BIGINT}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{updateUid,jdbcType=BIGINT}, #{tenantCode,jdbcType=VARCHAR}, #{reviewDesc,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yusys.agile.review.domain.Review" useGeneratedKeys="true" keyProperty="reviewId">
    insert into s_review
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="reviewId != null">
        review_id,
      </if>
      <if test="issueId != null">
        issue_id,
      </if>
      <if test="issueType != null">
        issue_type,
      </if>
      <if test="reviewTheme != null">
        review_theme,
      </if>
      <if test="expectTime != null">
        expect_time,
      </if>
      <if test="reviewStatus != null">
        review_status,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createUid != null">
        create_uid,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateUid != null">
        update_uid,
      </if>
      <if test="tenantCode != null">
        tenant_code,
      </if>
      <if test="reviewDesc != null">
        review_desc,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="reviewId != null">
        #{reviewId,jdbcType=BIGINT},
      </if>
      <if test="issueId != null">
        #{issueId,jdbcType=BIGINT},
      </if>
      <if test="issueType != null">
        #{issueType,jdbcType=TINYINT},
      </if>
      <if test="reviewTheme != null">
        #{reviewTheme,jdbcType=VARCHAR},
      </if>
      <if test="expectTime != null">
        #{expectTime,jdbcType=TIMESTAMP},
      </if>
      <if test="reviewStatus != null">
        #{reviewStatus,jdbcType=VARCHAR},
      </if>
      <if test="version != null">
        #{version,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUid != null">
        #{createUid,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUid != null">
        #{updateUid,jdbcType=BIGINT},
      </if>
      <if test="tenantCode != null">
        #{tenantCode,jdbcType=VARCHAR},
      </if>
      <if test="reviewDesc != null">
        #{reviewDesc,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yusys.agile.review.domain.ReviewExample" resultType="java.lang.Long">
    select count(*) from s_review
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update s_review
    <set>
      <if test="record.reviewId != null">
        review_id = #{record.reviewId,jdbcType=BIGINT},
      </if>
      <if test="record.issueId != null">
        issue_id = #{record.issueId,jdbcType=BIGINT},
      </if>
      <if test="record.issueType != null">
        issue_type = #{record.issueType,jdbcType=TINYINT},
      </if>
      <if test="record.reviewTheme != null">
        review_theme = #{record.reviewTheme,jdbcType=VARCHAR},
      </if>
      <if test="record.expectTime != null">
        expect_time = #{record.expectTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.reviewStatus != null">
        review_status = #{record.reviewStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=VARCHAR},
      </if>
      <if test="record.projectId != null">
        project_id = #{record.projectId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUid != null">
        create_uid = #{record.createUid,jdbcType=BIGINT},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUid != null">
        update_uid = #{record.updateUid,jdbcType=BIGINT},
      </if>
      <if test="record.tenantCode != null">
        tenant_code = #{record.tenantCode,jdbcType=VARCHAR},
      </if>
      <if test="record.reviewDesc != null">
        review_desc = #{record.reviewDesc,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update s_review
    set review_id = #{record.reviewId,jdbcType=BIGINT},
      issue_id = #{record.issueId,jdbcType=BIGINT},
      issue_type = #{record.issueType,jdbcType=TINYINT},
      review_theme = #{record.reviewTheme,jdbcType=VARCHAR},
      expect_time = #{record.expectTime,jdbcType=TIMESTAMP},
      review_status = #{record.reviewStatus,jdbcType=VARCHAR},
      version = #{record.version,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=VARCHAR},
      project_id = #{record.projectId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_uid = #{record.createUid,jdbcType=BIGINT},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      update_uid = #{record.updateUid,jdbcType=BIGINT},
      tenant_code = #{record.tenantCode,jdbcType=VARCHAR},
      review_desc = #{record.reviewDesc,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update s_review
    set review_id = #{record.reviewId,jdbcType=BIGINT},
      issue_id = #{record.issueId,jdbcType=BIGINT},
      issue_type = #{record.issueType,jdbcType=TINYINT},
      review_theme = #{record.reviewTheme,jdbcType=VARCHAR},
      expect_time = #{record.expectTime,jdbcType=TIMESTAMP},
      review_status = #{record.reviewStatus,jdbcType=VARCHAR},
      version = #{record.version,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=VARCHAR},
      project_id = #{record.projectId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_uid = #{record.createUid,jdbcType=BIGINT},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      update_uid = #{record.updateUid,jdbcType=BIGINT},
      tenant_code = #{record.tenantCode,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yusys.agile.review.domain.Review">
    update s_review
    <set>
      <if test="issueId != null">
        issue_id = #{issueId,jdbcType=BIGINT},
      </if>
      <if test="issueType != null">
        issue_type = #{issueType,jdbcType=TINYINT},
      </if>
      <if test="reviewTheme != null">
        review_theme = #{reviewTheme,jdbcType=VARCHAR},
      </if>
      <if test="expectTime != null">
        expect_time = #{expectTime,jdbcType=TIMESTAMP},
      </if>
      <if test="reviewStatus != null">
        review_status = #{reviewStatus,jdbcType=VARCHAR},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=VARCHAR},
      </if>
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUid != null">
        create_uid = #{createUid,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUid != null">
        update_uid = #{updateUid,jdbcType=BIGINT},
      </if>
      <if test="tenantCode != null">
        tenant_code = #{tenantCode,jdbcType=VARCHAR},
      </if>
      <if test="reviewDesc != null">
        review_desc = #{reviewDesc,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where review_id = #{reviewId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yusys.agile.review.domain.Review">
    update s_review
    set issue_id = #{issueId,jdbcType=BIGINT},
      issue_type = #{issueType,jdbcType=TINYINT},
      review_theme = #{reviewTheme,jdbcType=VARCHAR},
      expect_time = #{expectTime,jdbcType=TIMESTAMP},
      review_status = #{reviewStatus,jdbcType=VARCHAR},
      version = #{version,jdbcType=VARCHAR},
      state = #{state,jdbcType=VARCHAR},
      project_id = #{projectId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_uid = #{createUid,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_uid = #{updateUid,jdbcType=BIGINT},
      tenant_code = #{tenantCode,jdbcType=VARCHAR},
      review_desc = #{reviewDesc,jdbcType=LONGVARCHAR}
    where review_id = #{reviewId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yusys.agile.review.domain.Review">
    update s_review
    set issue_id = #{issueId,jdbcType=BIGINT},
      issue_type = #{issueType,jdbcType=TINYINT},
      review_theme = #{reviewTheme,jdbcType=VARCHAR},
      expect_time = #{expectTime,jdbcType=TIMESTAMP},
      review_status = #{reviewStatus,jdbcType=VARCHAR},
      version = #{version,jdbcType=VARCHAR},
      state = #{state,jdbcType=VARCHAR},
      project_id = #{projectId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_uid = #{createUid,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_uid = #{updateUid,jdbcType=BIGINT},
      tenant_code = #{tenantCode,jdbcType=VARCHAR}
    where review_id = #{reviewId,jdbcType=BIGINT}
  </update>
</mapper>