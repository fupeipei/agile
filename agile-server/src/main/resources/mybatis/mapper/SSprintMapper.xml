<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yusys.agile.sprintv3.dao.SSprintMapper">
    <resultMap id="BaseResultMap" type="com.yusys.agile.sprintv3.domain.SSprint">
        <id column="sprint_id" jdbcType="BIGINT" property="sprintId"/>
        <result column="sprint_name" jdbcType="VARCHAR" property="sprintName"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="state" jdbcType="VARCHAR" property="state"/>
        <result column="start_time" jdbcType="TIMESTAMP" property="startTime"/>
        <result column="end_time" jdbcType="TIMESTAMP" property="endTime"/>
        <result column="finish_time" jdbcType="TIMESTAMP" property="finishTime"/>
        <result column="team_id" jdbcType="BIGINT" property="teamId"/>
        <result column="work_hours" jdbcType="INTEGER" property="workHours"/>
        <result column="version_number" jdbcType="VARCHAR" property="versionNumber"/>
        <result column="sync_state" jdbcType="TINYINT" property="syncState"/>
        <result column="create_uid" jdbcType="BIGINT" property="createUid"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_uid" jdbcType="BIGINT" property="updateUid"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="tenant_code" jdbcType="VARCHAR" property="tenantCode"/>
    </resultMap>

    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yusys.agile.sprintv3.domain.SSprintWithBLOBs">
        <result column="sprint_desc" jdbcType="LONGVARCHAR" property="sprintDesc"/>
        <result column="sprint_days" jdbcType="LONGVARCHAR" property="sprintDays"/>
    </resultMap>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List">
        sprint_id,
        sprint_name,
        status,
        state,
        start_time,
        end_time,
        finish_time,
        team_id,
        work_hours,
        version_number,
        sync_state,
        create_uid,
        create_time,
        update_uid,
        update_time,
        tenant_code
    </sql>

    <sql id="Blob_Column_List">
        sprint_desc,
        sprint_days
    </sql>

    <sql id="sprintOverViewDetails">
    </sql>

    <select id="selectByExampleWithBLOBs" parameterType="com.yusys.agile.sprintv3.domain.SSprintExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from s_sprint
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="com.yusys.agile.sprintv3.domain.SSprintExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from s_sprint
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from s_sprint
        where sprint_id = #{sprintId,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from s_sprint
        where sprint_id = #{sprintId,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="com.yusys.agile.sprintv3.domain.SSprintExample">
        delete
        from s_sprint
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.yusys.agile.sprintv3.domain.SSprintWithBLOBs" keyColumn="sprint_id"
            keyProperty="sprintId" useGeneratedKeys="true">
        insert into s_sprint (sprint_name, status,
                              state, start_time, end_time,
                              finish_time, team_id, work_hours,
                              version_number, sync_state, create_uid,
                              create_time, update_uid, update_time,
                              tenant_code, sprint_desc, sprint_days)
        values (#{sprintName,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT},
                #{state,jdbcType=VARCHAR}, #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP},
                #{finishTime,jdbcType=TIMESTAMP}, #{teamId,jdbcType=BIGINT}, #{workHours,jdbcType=INTEGER},
                #{versionNumber,jdbcType=VARCHAR}, #{syncState,jdbcType=TINYINT}, #{createUid,jdbcType=BIGINT},
                #{createTime,jdbcType=TIMESTAMP}, #{updateUid,jdbcType=BIGINT}, #{updateTime,jdbcType=TIMESTAMP},
                #{tenantCode,jdbcType=VARCHAR}, #{sprintDesc,jdbcType=LONGVARCHAR}, #{sprintDays,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.yusys.agile.sprintv3.domain.SSprintWithBLOBs" keyColumn="sprint_id"
            keyProperty="sprintId">
        insert into s_sprint
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="sprintId != null">
                sprint_id,
            </if>
            <if test="sprintName != null">
                sprint_name,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="startTime != null">
                start_time,
            </if>
            <if test="endTime != null">
                end_time,
            </if>
            <if test="finishTime != null">
                finish_time,
            </if>
            <if test="teamId != null">
                team_id,
            </if>
            <if test="workHours != null">
                work_hours,
            </if>
            <if test="versionNumber != null">
                version_number,
            </if>
            <if test="syncState != null">
                sync_state,
            </if>
            <if test="createUid != null">
                create_uid,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateUid != null">
                update_uid,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="tenantCode != null">
                tenant_code,
            </if>
            <if test="sprintDesc != null">
                sprint_desc,
            </if>
            <if test="sprintDays != null">
                sprint_days,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="sprintId != null">
                #{sprintId,jdbcType=BIGINT},
            </if>
            <if test="sprintName != null">
                #{sprintName,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="state != null">
                #{state,jdbcType=VARCHAR},
            </if>
            <if test="startTime != null">
                #{startTime,jdbcType=TIMESTAMP},
            </if>
            <if test="endTime != null">
                #{endTime,jdbcType=TIMESTAMP},
            </if>
            <if test="finishTime != null">
                #{finishTime,jdbcType=TIMESTAMP},
            </if>
            <if test="teamId != null">
                #{teamId,jdbcType=BIGINT},
            </if>
            <if test="workHours != null">
                #{workHours,jdbcType=INTEGER},
            </if>
            <if test="versionNumber != null">
                #{versionNumber,jdbcType=VARCHAR},
            </if>
            <if test="syncState != null">
                #{syncState,jdbcType=TINYINT},
            </if>
            <if test="createUid != null">
                #{createUid,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUid != null">
                #{updateUid,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="tenantCode != null">
                #{tenantCode,jdbcType=VARCHAR},
            </if>
            <if test="sprintDesc != null">
                #{sprintDesc,jdbcType=LONGVARCHAR},
            </if>
            <if test="sprintDays != null">
                #{sprintDays,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.yusys.agile.sprintv3.domain.SSprintExample"
            resultType="java.lang.Long">
        select count(*)
        from s_sprint
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update s_sprint
        <set>
            <if test="record.sprintId != null">
                sprint_id = #{record.sprintId,jdbcType=BIGINT},
            </if>
            <if test="record.sprintName != null">
                sprint_name = #{record.sprintName,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=TINYINT},
            </if>
            <if test="record.state != null">
                state = #{record.state,jdbcType=VARCHAR},
            </if>
            <if test="record.startTime != null">
                start_time = #{record.startTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.endTime != null">
                end_time = #{record.endTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.finishTime != null">
                finish_time = #{record.finishTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.teamId != null">
                team_id = #{record.teamId,jdbcType=BIGINT},
            </if>
            <if test="record.workHours != null">
                work_hours = #{record.workHours,jdbcType=INTEGER},
            </if>
            <if test="record.versionNumber != null">
                version_number = #{record.versionNumber,jdbcType=VARCHAR},
            </if>
            <if test="record.syncState != null">
                sync_state = #{record.syncState,jdbcType=TINYINT},
            </if>
            <if test="record.createUid != null">
                create_uid = #{record.createUid,jdbcType=BIGINT},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateUid != null">
                update_uid = #{record.updateUid,jdbcType=BIGINT},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.tenantCode != null">
                tenant_code = #{record.tenantCode,jdbcType=VARCHAR},
            </if>
            <if test="record.sprintDesc != null">
                sprint_desc = #{record.sprintDesc,jdbcType=LONGVARCHAR},
            </if>
            <if test="record.sprintDays != null">
                sprint_days = #{record.sprintDays,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update s_sprint
        set sprint_id      = #{record.sprintId,jdbcType=BIGINT},
            sprint_name    = #{record.sprintName,jdbcType=VARCHAR},
            status         = #{record.status,jdbcType=TINYINT},
            state          = #{record.state,jdbcType=VARCHAR},
            start_time     = #{record.startTime,jdbcType=TIMESTAMP},
            end_time       = #{record.endTime,jdbcType=TIMESTAMP},
            finish_time    = #{record.finishTime,jdbcType=TIMESTAMP},
            team_id        = #{record.teamId,jdbcType=BIGINT},
            work_hours     = #{record.workHours,jdbcType=INTEGER},
            version_number = #{record.versionNumber,jdbcType=VARCHAR},
            sync_state     = #{record.syncState,jdbcType=TINYINT},
            create_uid     = #{record.createUid,jdbcType=BIGINT},
            create_time    = #{record.createTime,jdbcType=TIMESTAMP},
            update_uid     = #{record.updateUid,jdbcType=BIGINT},
            update_time    = #{record.updateTime,jdbcType=TIMESTAMP},
            tenant_code    = #{record.tenantCode,jdbcType=VARCHAR},
            sprint_desc    = #{record.sprintDesc,jdbcType=LONGVARCHAR},
            sprint_days    = #{record.sprintDays,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update s_sprint
        set sprint_id      = #{record.sprintId,jdbcType=BIGINT},
            sprint_name    = #{record.sprintName,jdbcType=VARCHAR},
            status         = #{record.status,jdbcType=TINYINT},
            state          = #{record.state,jdbcType=VARCHAR},
            start_time     = #{record.startTime,jdbcType=TIMESTAMP},
            end_time       = #{record.endTime,jdbcType=TIMESTAMP},
            finish_time    = #{record.finishTime,jdbcType=TIMESTAMP},
            team_id        = #{record.teamId,jdbcType=BIGINT},
            work_hours     = #{record.workHours,jdbcType=INTEGER},
            version_number = #{record.versionNumber,jdbcType=VARCHAR},
            sync_state     = #{record.syncState,jdbcType=TINYINT},
            create_uid     = #{record.createUid,jdbcType=BIGINT},
            create_time    = #{record.createTime,jdbcType=TIMESTAMP},
            update_uid     = #{record.updateUid,jdbcType=BIGINT},
            update_time    = #{record.updateTime,jdbcType=TIMESTAMP},
            tenant_code    = #{record.tenantCode,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.yusys.agile.sprintv3.domain.SSprintWithBLOBs">
        update s_sprint
        <set>
            <if test="sprintName != null">
                sprint_name = #{sprintName,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=VARCHAR},
            </if>
            <if test="startTime != null">
                start_time = #{startTime,jdbcType=TIMESTAMP},
            </if>
            <if test="endTime != null">
                end_time = #{endTime,jdbcType=TIMESTAMP},
            </if>
            <if test="finishTime != null">
                finish_time = #{finishTime,jdbcType=TIMESTAMP},
            </if>
            <if test="teamId != null">
                team_id = #{teamId,jdbcType=BIGINT},
            </if>
            <if test="workHours != null">
                work_hours = #{workHours,jdbcType=INTEGER},
            </if>
            <if test="versionNumber != null">
                version_number = #{versionNumber,jdbcType=VARCHAR},
            </if>
            <if test="syncState != null">
                sync_state = #{syncState,jdbcType=TINYINT},
            </if>
            <if test="createUid != null">
                create_uid = #{createUid,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUid != null">
                update_uid = #{updateUid,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="tenantCode != null">
                tenant_code = #{tenantCode,jdbcType=VARCHAR},
            </if>
            <if test="sprintDesc != null">
                sprint_desc = #{sprintDesc,jdbcType=LONGVARCHAR},
            </if>
            <if test="sprintDays != null">
                sprint_days = #{sprintDays,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where sprint_id = #{sprintId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yusys.agile.sprintv3.domain.SSprintWithBLOBs">
        update s_sprint
        set sprint_name    = #{sprintName,jdbcType=VARCHAR},
            status         = #{status,jdbcType=TINYINT},
            state          = #{state,jdbcType=VARCHAR},
            start_time     = #{startTime,jdbcType=TIMESTAMP},
            end_time       = #{endTime,jdbcType=TIMESTAMP},
            finish_time    = #{finishTime,jdbcType=TIMESTAMP},
            team_id        = #{teamId,jdbcType=BIGINT},
            work_hours     = #{workHours,jdbcType=INTEGER},
            version_number = #{versionNumber,jdbcType=VARCHAR},
            sync_state     = #{syncState,jdbcType=TINYINT},
            create_uid     = #{createUid,jdbcType=BIGINT},
            create_time    = #{createTime,jdbcType=TIMESTAMP},
            update_uid     = #{updateUid,jdbcType=BIGINT},
            update_time    = #{updateTime,jdbcType=TIMESTAMP},
            tenant_code    = #{tenantCode,jdbcType=VARCHAR},
            sprint_desc    = #{sprintDesc,jdbcType=LONGVARCHAR},
            sprint_days    = #{sprintDays,jdbcType=LONGVARCHAR}
        where sprint_id = #{sprintId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.yusys.agile.sprintv3.domain.SSprint">
        update s_sprint
        set sprint_name    = #{sprintName,jdbcType=VARCHAR},
            status         = #{status,jdbcType=TINYINT},
            state          = #{state,jdbcType=VARCHAR},
            start_time     = #{startTime,jdbcType=TIMESTAMP},
            end_time       = #{endTime,jdbcType=TIMESTAMP},
            finish_time    = #{finishTime,jdbcType=TIMESTAMP},
            team_id        = #{teamId,jdbcType=BIGINT},
            work_hours     = #{workHours,jdbcType=INTEGER},
            version_number = #{versionNumber,jdbcType=VARCHAR},
            sync_state     = #{syncState,jdbcType=TINYINT},
            create_uid     = #{createUid,jdbcType=BIGINT},
            create_time    = #{createTime,jdbcType=TIMESTAMP},
            update_uid     = #{updateUid,jdbcType=BIGINT},
            update_time    = #{updateTime,jdbcType=TIMESTAMP},
            tenant_code    = #{tenantCode,jdbcType=VARCHAR}
        where sprint_id = #{sprintId,jdbcType=BIGINT}
    </update>

    <select id="CheckSprintNameExistInTeam" resultType="int">
        select if(count(sprint_id > 0), true, false)
        from s_sprint
        where binary sprint_name = #{sprintName}
          and team_id = #{teamId}
          and state = 'U'
          and status <![CDATA[<>]]> 0
    </select>

    <update id="arrangeTeam">
        UPDATE sprint
        SET team_id = #{teamId}
        WHERE sprint_id = #{sprintId}
    </update>
    <select id="getUnStartIds" resultType="java.lang.Long">
        select sprint_id
        from s_sprint
        where start_time <![CDATA[<=]]> #{now}
          AND status = 2
          and state = 'U'
    </select>
    <update id="changeStatusTOProgressByIds">
        UPDATE s_sprint
        SET status=3 WHERE sprint_id IN(
        <foreach collection="sprintIds" separator="," item="sprintId">
            #{sprintId}
        </foreach>
        )
    </update>

    <sql id="query_list_column">
        sp.sprint_id      as sprint_id,
        sp.sprint_name    as sprint_name,
        sp.status         as status,
        sp.start_time     as start_time,
        sp.end_time       as end_time,
        sp.finish_time    as finish_time,
        sp.sprint_days    as sprint_days,
        sp.team_id        as team_id,
        sp.work_hours     as work_hours,
        sp.version_number as version_number,
        sp.sync_state     as sync_state,
        sp.create_uid     as create_uid,
        sp.create_time    as create_time,
        sp.tenant_code    as tenant_code
    </sql>
    <sql id="query_list_param">
        sp.team_id = st.team_id
        and sp.state = 'U'
        <if test="params != null">
            <if test="params.team != null and params.team != ''">
                and (st.team_id like concat('%',#{params.team},'%')
                or st.team_name like concat('%',#{params.team},'%')
                )
            </if>
            <if test="params.sprint != null and params.sprint != ''">
                and (sp.sprint_id like concat('%',#{params.sprint},'%')
                or sp.sprint_name like concat('%',#{params.sprint},'%')
                )
            </if>
            <if test="params.tenantCode != null and params.tenantCode != ''">
                and sp.tenant_code=#{params.tenantCode}
            </if>
        </if>
    </sql>
    <sql id="query_other_list_param">
        and sp.team_id = st.team_id
        and st.team_id = stm.team_id
        and st.team_id = sts.team_id
        and sp.state = 'U'
        <if test="params != null">
            <if test="params.team != null and params.team != ''">
                and (st.team_id like concat('%',#{params.team},'%')
                or st.team_name like concat('%',#{params.team},'%')
                )
            </if>
            <if test="params.sprint != null and params.sprint != ''">
                and (sp.sprint_id like concat('%',#{params.sprint},'%')
                or sp.sprint_name like concat('%',#{params.sprint},'%')
                )
            </if>
            <if test="params.system != null">
                and sts.system_id = #{params.system}
            </if>
            <if test="params.tenantCode != null and params.tenantCode != ''">
                and sp.tenant_code=#{params.tenantCode}
            </if>
        </if>
    </sql>
    <select id="queryAllSprint" resultType="com.yusys.agile.sprintV3.dto.SprintListDTO">
        select distinct
        <include refid="query_list_column"/>
        from s_sprint sp,
             s_team st
        <where>
            <include refid="query_list_param"/>
        </where>
        order by sp.create_time desc
    </select>
    <select id="queryOtherSprint" resultType="com.yusys.agile.sprintV3.dto.SprintListDTO">
        select distinct
        <include refid="query_list_column"/>
        from s_sprint sp,
             s_team st,
             s_team_member stm,
             s_team_system sts
        <where>
            <include refid="query_other_list_param"/>
            <if test="params.user != null">
                and (sp.create_uid = #{params.user} or stm.user_id = #{params.user} or stm.role_id = 103)
            </if>
        </where>
        order by sp.create_time desc
    </select>

    <update id="cancelSprint">
        update s_sprint
        set status = 0
        where sprint_id = #{sprintId}
    </update>

    <select id="sprintExist" resultType="int">
        select count(sprint_id)
        from s_sprint
        where sprint_id = #{sprintId}
    </select>


    <select id="querySprintExistUnfinishedStory" resultType="java.lang.Boolean">
        select if(count(issue_id) > 0, true, false)
        from s_issue
        where sprint_id = #{sprintId}
          and issue_type = 3
          and (stage_id <![CDATA[<>]]> 4 or lane_id <![CDATA[<>]]> 106)
          and state = 'U'
    </select>

    <update id="sprintFinish">
        update s_sprint
        set status = 4
        where sprint_id = #{sprintId}
    </update>

    <select id="querySprintStatus" resultType="java.lang.Byte">
        select status
        from s_sprint
        where sprint_id = #{sprintId}
          and state = 'U'
    </select>


    <select id="selectByPrimaryKeyNotText" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        from s_sprint
        where sprint_id = #{sprintId,jdbcType=BIGINT}
    </select>

    <select id="queryValidSprintById" resultMap="ResultMapWithBLOBs">
        select status, sprint_name, sprint_id, work_hours, start_time, end_time, team_id
        from s_sprint
        where sprint_id = #{sprintId}
          and state = 'U'
    </select>

    <select id="selectByIdAndName" resultType="com.yusys.agile.sprintV3.dto.SprintListDTO">
        select
        <include refid="Base_Column_List"/>
        from s_sprint
        where state = 'U'
          and status in (2, 3, 4)
          and team_id = #{teamId}
          and (
                sprint_name like concat('%', #{sprint}, '%')
                        or sprint_id like concat('%', #{sprint}, '%')
                )
        order by create_time desc
    </select>

    <select id="querySprintStoryNumBer" resultType="int">
        select count(issue_id)
        from s_issue
        where sprint_id = #{sprintId}
          and issue_type = #{issueType}
          and state = 'U'
    </select>

    <select id="querySprintFinishedStoryNumber" resultType="int">
        select count(issue_id)
        from s_issue
        where sprint_id = #{sprintId}
          and issue_type = #{issueType}
          and lane_id = #{status}
          and state = 'U'
    </select>

    <select id="querySprintFinishedStoryPoint" resultType="int">
        select ifnull(sum(a.value), 0)
        from s_sys_extend_field_detail a
        where a.issue_id in
              (select issue_id
               from s_issue
               where sprint_id = #{sprintId}
                 and lane_id = #{status}
                 and issue_type = #{issueType}
                 and state = 'U')
    </select>

    <select id="querySprintStoryPoint" resultType="int">
        select ifnull(sum(a.value), 0)
        from s_sys_extend_field_detail a
        where a.issue_id in
              (select issue_id
               from s_issue
               where sprint_id = #{sprintId}
                 and issue_type = #{issueType}
                 and state = 'U')
    </select>

    <select id="querySprintFinishedWorkload" resultType="int">
        select ifnull(sum(plan_workload), 0)
        from s_issue
        where sprint_id = #{sprintId}
          and lane_id = #{status}
          and issue_type = #{issueType}
          and state = 'U'
    </select>

    <select id="querySprintWorkload" resultType="int">
        select ifnull(sum(plan_workload), 0)
        from s_issue a
        where a.sprint_id = #{sprintId}
          and issue_type = #{issueType}
          and state = 'U'
    </select>

    <select id="querySprintFinishedTaskNumber" resultType="int">
        select count(issue_id)
        from s_issue
        where sprint_id = #{sprintId}
          and lane_id = #{status}
          and issue_type = #{issueType}
          and state = 'U'
    </select>

    <select id="querySprintTaskNumber" resultType="int">
        select count(issue_id)
        from s_issue
        where sprint_id = #{sprintId}
          and issue_type = #{issueType}
          and state = 'U'
    </select>

    <select id="selectBySystemId" resultType="com.yusys.agile.sprintV3.dto.SprintListDTO">
        SELECT DISTINCT ss.sprint_id, ss.sprint_name, st.team_id, st.team_name
        from agile.s_sprint ss
                     left join agile.s_team_system sts
                on ss.team_id = sts.team_id
                     left join agile.s_team st on st.team_id = ss.team_id
        where ss.status in (2, 3)
          and sts.system_id = #{systemId}
          and ss.end_time > now()
    </select>

    <select id="querySprintMember" resultType="com.yusys.agile.sprintv3.responseModel.SprintMembersWorkHours">
        select *
        from s_sprint a
                     left join s_sprint_user_hour b on a.sprint_id = b.sprint_id
                     left join s_issue c on b.sprint_id = c.sprint_id
        where a.sprint_id = 10000
          and c.issue_type = 4
    </select>

    <select id="querySprintUserIds" resultType="java.lang.Long">
        select distinct user_id
        from s_sprint_user_hour
        where sprint_id = #{sprintId}
    </select>
    <!--    TYPE_ADD_STATE("未领取", 107L),
        TYPE_RECEIVED_STATE("已领取", 108L),
        TYPE_MODIFYING_STATE("进行中", 109L),
        TYPE_CLOSED_STATE("已完成", 110L);-->

    <!--实际工作量计算方法：进行中（预计工时-剩余工时）+已完成（实际工时）任务卡片总和-->
    <select id="queryUserActualWorkload" resultType="Integer">
        select (ifnull((select sum(plan_workload)
                        from s_issue
                        where handler = #{userId}
                          and sprint_id = #{sprintId}
                          and lane_id = 109
                          and issue_type = #{issueType}
                          and state = 'U'), 0)
                        -
                ifnull((select sum(remain_workload)
                        from s_issue b
                        where b.handler = #{userId}
                          and b.sprint_id = #{sprintId}
                          and lane_id = 109
                          and state = 'U'), 0)
                +
                ifnull((select sum(really_workload)
                        from s_issue
                        where handler = #{userId}
                          and sprint_id = #{sprintId}
                          and lane_id = 110
                          and state = 'U'), 0)
                       ) AS a
    </select>

    <!-- TYPE_ADD_STATE("未领取", 107L),
       TYPE_RECEIVED_STATE("已领取", 108L),
       TYPE_MODIFYING_STATE("进行中", 109L),
       TYPE_CLOSED_STATE("已完成", 110L);-->
    <!--剩余工作量计算方法：进行中 已领取（剩余工作量）任务卡片总和-->
    <select id="queryUserResidueWorkload" resultType="int">
        select ifnull(sum(plan_workload), 0)
        from s_issue
        where handler = #{userId}
          and sprint_id = #{sprintId}
          and lane_id in (109, 108)
          and state = 'U'
    </select>

    <select id="unclaimedWorkHours" resultType="int">
        select ifnull(sum(plan_workload), 0)
        from s_issue
        where handler is null
          and sprint_id = #{sprintId}
          and issue_type = #{issueType}
          and lane_id = #{status}
          and state = 'U'
    </select>

    <select id="unclaimedTaskNumber" resultType="int">
        select count(sprint_id)
        from s_issue
        where handler is null
          and sprint_id = #{sprintId}
          and issue_type = #{issueType}
          and lane_id = #{status}
          and state = 'U'
    </select>

    <select id="queryUserTaskNumber" resultType="int">
        select count(issue_id)
        from s_issue
        where sprint_id = #{sprintId}
          and handler = #{userId}
          and issue_type = #{issueType}
          and state = 'U'
    </select>

    <update id="changeIssueStatusBySprintId">
        update s_issue
        set lane_id         = #{status},
            handler         = null,
            really_workload = 0,
            sprint_id       = null
        where issue_type = #{IssueType}
          and sprint_id = #{sprintId}
          and state = 'U'
    </update>

    <select id="checkIdentityInPoSmOrCreatUser" resultType="boolean">
        select if((select count(*)
                   from s_sprint a
                                left join s_team_member b on a.team_id = b.team_id
                   where b.user_id = #{userId}
                     and b.role_id in (103, 104)
                     and a.sprint_id = #{sprintId})
                          +
                  (select count(*)
                   from s_sprint a
                   where sprint_id = #{sprintId}
                     and create_uid = #{userId}) > 0, true, false)
    </select>

    <select id="sprintBindingIssue" resultType="boolean">
        select if((select count(issue_id)
                   from s_issue
                   where sprint_id = #{sprintId}
                     and state = 'U') > 0, true, false)
    </select>

    <select id="querySprintMembersId" resultType="java.lang.Long">
        select user_id
        from s_sprint_user_hour
        where sprint_id = #{sprintId}
    </select>

    <select id="querySprintHasRelevanceStory" resultType="boolean">
        select if(count(sprint_id) > 0, true, false)
        from s_issue
        where sprint_id = #{sprintId}
          and state = 'U'
    </select>

    <select id="querySprintByTeamId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from s_sprint
        where team_id = #{teamId}
        and state = 'U'
    </select>

    <select id="getOneSprintByTeamId" resultType="com.yusys.agile.sprintv3.domain.SSprint">
        select <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
        from sprint where team_id = #{teamId} and status in (0,2,3,4) and state = 'U' ORDER BY update_time DESC, create_time DESC LIMIT 1
    </select>

    <select id="selectByExampleDTO" resultType="com.yusys.agile.sprintV3.dto.SprintV3DTO">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
        from s_sprint
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

</mapper>